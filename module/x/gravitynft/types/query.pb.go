// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryLastNFTEventNonceByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastNFTEventNonceByAddrRequest) Reset()         { *m = QueryLastNFTEventNonceByAddrRequest{} }
func (m *QueryLastNFTEventNonceByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastNFTEventNonceByAddrRequest) ProtoMessage()    {}
func (*QueryLastNFTEventNonceByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{2}
}
func (m *QueryLastNFTEventNonceByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNFTEventNonceByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNFTEventNonceByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNFTEventNonceByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNFTEventNonceByAddrRequest.Merge(m, src)
}
func (m *QueryLastNFTEventNonceByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNFTEventNonceByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNFTEventNonceByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNFTEventNonceByAddrRequest proto.InternalMessageInfo

func (m *QueryLastNFTEventNonceByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastNFTEventNonceByAddrResponse struct {
	LastNftEventNonce uint64 `protobuf:"varint,1,opt,name=last_nft_event_nonce,json=lastNftEventNonce,proto3" json:"last_nft_event_nonce,omitempty"`
}

func (m *QueryLastNFTEventNonceByAddrResponse) Reset()         { *m = QueryLastNFTEventNonceByAddrResponse{} }
func (m *QueryLastNFTEventNonceByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastNFTEventNonceByAddrResponse) ProtoMessage()    {}
func (*QueryLastNFTEventNonceByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{3}
}
func (m *QueryLastNFTEventNonceByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNFTEventNonceByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNFTEventNonceByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNFTEventNonceByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNFTEventNonceByAddrResponse.Merge(m, src)
}
func (m *QueryLastNFTEventNonceByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNFTEventNonceByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNFTEventNonceByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNFTEventNonceByAddrResponse proto.InternalMessageInfo

func (m *QueryLastNFTEventNonceByAddrResponse) GetLastNftEventNonce() uint64 {
	if m != nil {
		return m.LastNftEventNonce
	}
	return 0
}

type QueryOutgoingSendNFTToEthsRequest struct {
}

func (m *QueryOutgoingSendNFTToEthsRequest) Reset()         { *m = QueryOutgoingSendNFTToEthsRequest{} }
func (m *QueryOutgoingSendNFTToEthsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingSendNFTToEthsRequest) ProtoMessage()    {}
func (*QueryOutgoingSendNFTToEthsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{4}
}
func (m *QueryOutgoingSendNFTToEthsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingSendNFTToEthsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingSendNFTToEthsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingSendNFTToEthsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingSendNFTToEthsRequest.Merge(m, src)
}
func (m *QueryOutgoingSendNFTToEthsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingSendNFTToEthsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingSendNFTToEthsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingSendNFTToEthsRequest proto.InternalMessageInfo

type QueryOutgoingSendNFTToEthsResponse struct {
	OutgoingNfts []OutgoingNFT `protobuf:"bytes,1,rep,name=outgoing_nfts,json=outgoingNfts,proto3" json:"outgoing_nfts"`
}

func (m *QueryOutgoingSendNFTToEthsResponse) Reset()         { *m = QueryOutgoingSendNFTToEthsResponse{} }
func (m *QueryOutgoingSendNFTToEthsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingSendNFTToEthsResponse) ProtoMessage()    {}
func (*QueryOutgoingSendNFTToEthsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{5}
}
func (m *QueryOutgoingSendNFTToEthsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingSendNFTToEthsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingSendNFTToEthsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingSendNFTToEthsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingSendNFTToEthsResponse.Merge(m, src)
}
func (m *QueryOutgoingSendNFTToEthsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingSendNFTToEthsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingSendNFTToEthsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingSendNFTToEthsResponse proto.InternalMessageInfo

func (m *QueryOutgoingSendNFTToEthsResponse) GetOutgoingNfts() []OutgoingNFT {
	if m != nil {
		return m.OutgoingNfts
	}
	return nil
}

type QueryLastObservedNFTEthBlockRequest struct {
}

func (m *QueryLastObservedNFTEthBlockRequest) Reset()         { *m = QueryLastObservedNFTEthBlockRequest{} }
func (m *QueryLastObservedNFTEthBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastObservedNFTEthBlockRequest) ProtoMessage()    {}
func (*QueryLastObservedNFTEthBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{6}
}
func (m *QueryLastObservedNFTEthBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastObservedNFTEthBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastObservedNFTEthBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastObservedNFTEthBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastObservedNFTEthBlockRequest.Merge(m, src)
}
func (m *QueryLastObservedNFTEthBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastObservedNFTEthBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastObservedNFTEthBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastObservedNFTEthBlockRequest proto.InternalMessageInfo

type QueryLastObservedNFTEthBlockResponse struct {
	LastObservedNftEthBlock uint64 `protobuf:"varint,1,opt,name=last_observed_nft_eth_block,json=lastObservedNftEthBlock,proto3" json:"last_observed_nft_eth_block,omitempty"`
}

func (m *QueryLastObservedNFTEthBlockResponse) Reset()         { *m = QueryLastObservedNFTEthBlockResponse{} }
func (m *QueryLastObservedNFTEthBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastObservedNFTEthBlockResponse) ProtoMessage()    {}
func (*QueryLastObservedNFTEthBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{7}
}
func (m *QueryLastObservedNFTEthBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastObservedNFTEthBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastObservedNFTEthBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastObservedNFTEthBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastObservedNFTEthBlockResponse.Merge(m, src)
}
func (m *QueryLastObservedNFTEthBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastObservedNFTEthBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastObservedNFTEthBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastObservedNFTEthBlockResponse proto.InternalMessageInfo

func (m *QueryLastObservedNFTEthBlockResponse) GetLastObservedNftEthBlock() uint64 {
	if m != nil {
		return m.LastObservedNftEthBlock
	}
	return 0
}

type QueryLastObservedNFTEthNonceRequest struct {
}

func (m *QueryLastObservedNFTEthNonceRequest) Reset()         { *m = QueryLastObservedNFTEthNonceRequest{} }
func (m *QueryLastObservedNFTEthNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastObservedNFTEthNonceRequest) ProtoMessage()    {}
func (*QueryLastObservedNFTEthNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{8}
}
func (m *QueryLastObservedNFTEthNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastObservedNFTEthNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastObservedNFTEthNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastObservedNFTEthNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastObservedNFTEthNonceRequest.Merge(m, src)
}
func (m *QueryLastObservedNFTEthNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastObservedNFTEthNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastObservedNFTEthNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastObservedNFTEthNonceRequest proto.InternalMessageInfo

type QueryLastObservedNFTEthNonceResponse struct {
	LastObservedNftEthNonce uint64 `protobuf:"varint,1,opt,name=last_observed_nft_eth_nonce,json=lastObservedNftEthNonce,proto3" json:"last_observed_nft_eth_nonce,omitempty"`
}

func (m *QueryLastObservedNFTEthNonceResponse) Reset()         { *m = QueryLastObservedNFTEthNonceResponse{} }
func (m *QueryLastObservedNFTEthNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastObservedNFTEthNonceResponse) ProtoMessage()    {}
func (*QueryLastObservedNFTEthNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{9}
}
func (m *QueryLastObservedNFTEthNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastObservedNFTEthNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastObservedNFTEthNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastObservedNFTEthNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastObservedNFTEthNonceResponse.Merge(m, src)
}
func (m *QueryLastObservedNFTEthNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastObservedNFTEthNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastObservedNFTEthNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastObservedNFTEthNonceResponse proto.InternalMessageInfo

func (m *QueryLastObservedNFTEthNonceResponse) GetLastObservedNftEthNonce() uint64 {
	if m != nil {
		return m.LastObservedNftEthNonce
	}
	return 0
}

type QueryNFTAttestationsRequest struct {
	// limit defines how many attestations to limit in the response.
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// order_by provides ordering of atteststions by nonce in the response. Either
	// 'asc' or 'desc' can be provided. If no value is provided, it defaults to
	// 'asc'.
	OrderBy string `protobuf:"bytes,2,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// claim_type allows filtering attestations by Ethereum claim type.
	ClaimType string `protobuf:"bytes,3,opt,name=claim_type,json=claimType,proto3" json:"claim_type,omitempty"`
	// nonce allows filtering attestations by Ethereum claim nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// height allows filtering attestations by Ethereum claim height.
	Height uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	// indicates whether to search for store data using the old Gravity v1 key "OracleAttestationKey"
	// Note that queries before the Mercury upgrade at height 1282013 must set this to true
	UseV1Key bool `protobuf:"varint,6,opt,name=use_v1_key,json=useV1Key,proto3" json:"use_v1_key,omitempty"`
}

func (m *QueryNFTAttestationsRequest) Reset()         { *m = QueryNFTAttestationsRequest{} }
func (m *QueryNFTAttestationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNFTAttestationsRequest) ProtoMessage()    {}
func (*QueryNFTAttestationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{10}
}
func (m *QueryNFTAttestationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNFTAttestationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNFTAttestationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNFTAttestationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNFTAttestationsRequest.Merge(m, src)
}
func (m *QueryNFTAttestationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNFTAttestationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNFTAttestationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNFTAttestationsRequest proto.InternalMessageInfo

func (m *QueryNFTAttestationsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryNFTAttestationsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *QueryNFTAttestationsRequest) GetClaimType() string {
	if m != nil {
		return m.ClaimType
	}
	return ""
}

func (m *QueryNFTAttestationsRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryNFTAttestationsRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryNFTAttestationsRequest) GetUseV1Key() bool {
	if m != nil {
		return m.UseV1Key
	}
	return false
}

type QueryNFTAttestationsResponse struct {
	NftAttestations []NFTAttestation `protobuf:"bytes,1,rep,name=nft_attestations,json=nftAttestations,proto3" json:"nft_attestations"`
}

func (m *QueryNFTAttestationsResponse) Reset()         { *m = QueryNFTAttestationsResponse{} }
func (m *QueryNFTAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNFTAttestationsResponse) ProtoMessage()    {}
func (*QueryNFTAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{11}
}
func (m *QueryNFTAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNFTAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNFTAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNFTAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNFTAttestationsResponse.Merge(m, src)
}
func (m *QueryNFTAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNFTAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNFTAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNFTAttestationsResponse proto.InternalMessageInfo

func (m *QueryNFTAttestationsResponse) GetNftAttestations() []NFTAttestation {
	if m != nil {
		return m.NftAttestations
	}
	return nil
}

type QueryPendingNFTIbcAutoForwardsRequest struct {
}

func (m *QueryPendingNFTIbcAutoForwardsRequest) Reset()         { *m = QueryPendingNFTIbcAutoForwardsRequest{} }
func (m *QueryPendingNFTIbcAutoForwardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNFTIbcAutoForwardsRequest) ProtoMessage()    {}
func (*QueryPendingNFTIbcAutoForwardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{12}
}
func (m *QueryPendingNFTIbcAutoForwardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNFTIbcAutoForwardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNFTIbcAutoForwardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNFTIbcAutoForwardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNFTIbcAutoForwardsRequest.Merge(m, src)
}
func (m *QueryPendingNFTIbcAutoForwardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNFTIbcAutoForwardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNFTIbcAutoForwardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNFTIbcAutoForwardsRequest proto.InternalMessageInfo

type QueryPendingNFTIbcAutoForwardsResponse struct {
	PendingNftIbcAutoForwards []*PendingNFTIbcAutoForward `protobuf:"bytes,1,rep,name=pending_nft_ibc_auto_forwards,json=pendingNftIbcAutoForwards,proto3" json:"pending_nft_ibc_auto_forwards,omitempty"`
}

func (m *QueryPendingNFTIbcAutoForwardsResponse) Reset() {
	*m = QueryPendingNFTIbcAutoForwardsResponse{}
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingNFTIbcAutoForwardsResponse) ProtoMessage()    {}
func (*QueryPendingNFTIbcAutoForwardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{13}
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingNFTIbcAutoForwardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingNFTIbcAutoForwardsResponse.Merge(m, src)
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingNFTIbcAutoForwardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingNFTIbcAutoForwardsResponse proto.InternalMessageInfo

func (m *QueryPendingNFTIbcAutoForwardsResponse) GetPendingNftIbcAutoForwards() []*PendingNFTIbcAutoForward {
	if m != nil {
		return m.PendingNftIbcAutoForwards
	}
	return nil
}

type QueryERC721ToClassIdRequest struct {
	Erc721 string `protobuf:"bytes,1,opt,name=erc721,proto3" json:"erc721,omitempty"`
}

func (m *QueryERC721ToClassIdRequest) Reset()         { *m = QueryERC721ToClassIdRequest{} }
func (m *QueryERC721ToClassIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryERC721ToClassIdRequest) ProtoMessage()    {}
func (*QueryERC721ToClassIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{14}
}
func (m *QueryERC721ToClassIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC721ToClassIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC721ToClassIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC721ToClassIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC721ToClassIdRequest.Merge(m, src)
}
func (m *QueryERC721ToClassIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC721ToClassIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC721ToClassIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC721ToClassIdRequest proto.InternalMessageInfo

func (m *QueryERC721ToClassIdRequest) GetErc721() string {
	if m != nil {
		return m.Erc721
	}
	return ""
}

type QueryERC721ToClassIdResponse struct {
	ClassId uint64 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryERC721ToClassIdResponse) Reset()         { *m = QueryERC721ToClassIdResponse{} }
func (m *QueryERC721ToClassIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryERC721ToClassIdResponse) ProtoMessage()    {}
func (*QueryERC721ToClassIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{15}
}
func (m *QueryERC721ToClassIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC721ToClassIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC721ToClassIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC721ToClassIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC721ToClassIdResponse.Merge(m, src)
}
func (m *QueryERC721ToClassIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC721ToClassIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC721ToClassIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC721ToClassIdResponse proto.InternalMessageInfo

func (m *QueryERC721ToClassIdResponse) GetClassId() uint64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type QueryClassIdToERC721Request struct {
	ClassId uint64 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryClassIdToERC721Request) Reset()         { *m = QueryClassIdToERC721Request{} }
func (m *QueryClassIdToERC721Request) String() string { return proto.CompactTextString(m) }
func (*QueryClassIdToERC721Request) ProtoMessage()    {}
func (*QueryClassIdToERC721Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{16}
}
func (m *QueryClassIdToERC721Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassIdToERC721Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassIdToERC721Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassIdToERC721Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassIdToERC721Request.Merge(m, src)
}
func (m *QueryClassIdToERC721Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassIdToERC721Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassIdToERC721Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassIdToERC721Request proto.InternalMessageInfo

func (m *QueryClassIdToERC721Request) GetClassId() uint64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type QueryClassIdToERC721Response struct {
	Erc721 string `protobuf:"bytes,1,opt,name=erc721,proto3" json:"erc721,omitempty"`
}

func (m *QueryClassIdToERC721Response) Reset()         { *m = QueryClassIdToERC721Response{} }
func (m *QueryClassIdToERC721Response) String() string { return proto.CompactTextString(m) }
func (*QueryClassIdToERC721Response) ProtoMessage()    {}
func (*QueryClassIdToERC721Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_96ce0fa72af846b7, []int{17}
}
func (m *QueryClassIdToERC721Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassIdToERC721Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassIdToERC721Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassIdToERC721Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassIdToERC721Response.Merge(m, src)
}
func (m *QueryClassIdToERC721Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassIdToERC721Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassIdToERC721Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassIdToERC721Response proto.InternalMessageInfo

func (m *QueryClassIdToERC721Response) GetErc721() string {
	if m != nil {
		return m.Erc721
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "gravitynft.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "gravitynft.v1.QueryParamsResponse")
	proto.RegisterType((*QueryLastNFTEventNonceByAddrRequest)(nil), "gravitynft.v1.QueryLastNFTEventNonceByAddrRequest")
	proto.RegisterType((*QueryLastNFTEventNonceByAddrResponse)(nil), "gravitynft.v1.QueryLastNFTEventNonceByAddrResponse")
	proto.RegisterType((*QueryOutgoingSendNFTToEthsRequest)(nil), "gravitynft.v1.QueryOutgoingSendNFTToEthsRequest")
	proto.RegisterType((*QueryOutgoingSendNFTToEthsResponse)(nil), "gravitynft.v1.QueryOutgoingSendNFTToEthsResponse")
	proto.RegisterType((*QueryLastObservedNFTEthBlockRequest)(nil), "gravitynft.v1.QueryLastObservedNFTEthBlockRequest")
	proto.RegisterType((*QueryLastObservedNFTEthBlockResponse)(nil), "gravitynft.v1.QueryLastObservedNFTEthBlockResponse")
	proto.RegisterType((*QueryLastObservedNFTEthNonceRequest)(nil), "gravitynft.v1.QueryLastObservedNFTEthNonceRequest")
	proto.RegisterType((*QueryLastObservedNFTEthNonceResponse)(nil), "gravitynft.v1.QueryLastObservedNFTEthNonceResponse")
	proto.RegisterType((*QueryNFTAttestationsRequest)(nil), "gravitynft.v1.QueryNFTAttestationsRequest")
	proto.RegisterType((*QueryNFTAttestationsResponse)(nil), "gravitynft.v1.QueryNFTAttestationsResponse")
	proto.RegisterType((*QueryPendingNFTIbcAutoForwardsRequest)(nil), "gravitynft.v1.QueryPendingNFTIbcAutoForwardsRequest")
	proto.RegisterType((*QueryPendingNFTIbcAutoForwardsResponse)(nil), "gravitynft.v1.QueryPendingNFTIbcAutoForwardsResponse")
	proto.RegisterType((*QueryERC721ToClassIdRequest)(nil), "gravitynft.v1.QueryERC721ToClassIdRequest")
	proto.RegisterType((*QueryERC721ToClassIdResponse)(nil), "gravitynft.v1.QueryERC721ToClassIdResponse")
	proto.RegisterType((*QueryClassIdToERC721Request)(nil), "gravitynft.v1.QueryClassIdToERC721Request")
	proto.RegisterType((*QueryClassIdToERC721Response)(nil), "gravitynft.v1.QueryClassIdToERC721Response")
}

func init() { proto.RegisterFile("gravitynft/v1/query.proto", fileDescriptor_96ce0fa72af846b7) }

var fileDescriptor_96ce0fa72af846b7 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xe3, 0x36, 0xd9, 0xa6, 0xd3, 0x56, 0x85, 0x21, 0x6d, 0x36, 0x9b, 0x64, 0xdb, 0x38,
	0x84, 0x44, 0xad, 0xb2, 0xce, 0x6e, 0xfa, 0x0b, 0x84, 0x84, 0xb2, 0xd5, 0x6e, 0x54, 0x40, 0x2e,
	0x2c, 0x2b, 0x90, 0x10, 0x92, 0xe5, 0xb5, 0xc7, 0x5e, 0x2b, 0x5e, 0xcf, 0xd6, 0x33, 0x5e, 0xb0,
	0x10, 0x17, 0x8e, 0x9c, 0x90, 0x7a, 0x82, 0x3f, 0x82, 0x3b, 0x07, 0xb8, 0x21, 0xf5, 0x58, 0x89,
	0x0b, 0x27, 0x84, 0x12, 0xfe, 0x10, 0xe4, 0x99, 0x71, 0xe2, 0x75, 0xc6, 0x4e, 0xc2, 0x6d, 0x67,
	0xe6, 0x3b, 0xef, 0x7d, 0xfc, 0x66, 0xe6, 0xfb, 0x12, 0xb0, 0xe4, 0x86, 0xe6, 0xc4, 0xa3, 0x71,
	0xe0, 0x50, 0x6d, 0xd2, 0xd4, 0x5e, 0x44, 0x28, 0x8c, 0x1b, 0xe3, 0x10, 0x53, 0x0c, 0x6f, 0x9c,
	0x2c, 0x35, 0x26, 0xcd, 0xda, 0x9d, 0x69, 0xa5, 0x49, 0x29, 0x22, 0xd4, 0xa4, 0x1e, 0x0e, 0xb8,
	0xbe, 0xb6, 0x3c, 0x2d, 0x70, 0x51, 0x80, 0x88, 0x47, 0xc4, 0xe2, 0xe2, 0xf4, 0x62, 0x12, 0x93,
	0x2f, 0xe4, 0x00, 0x68, 0x3c, 0x46, 0xe9, 0x9e, 0x15, 0x17, 0x63, 0xd7, 0x47, 0x9a, 0x39, 0xf6,
	0x34, 0x33, 0x08, 0x30, 0xcf, 0x96, 0xae, 0x2e, 0xb8, 0xd8, 0xc5, 0xec, 0xa7, 0x96, 0xfc, 0xe2,
	0xb3, 0xea, 0x02, 0x80, 0x9f, 0x26, 0xdf, 0xf0, 0x89, 0x19, 0x9a, 0x23, 0xd2, 0x43, 0x2f, 0x22,
	0x44, 0xa8, 0xfa, 0x21, 0x78, 0x6b, 0x6a, 0x96, 0x8c, 0x71, 0x40, 0x10, 0xdc, 0x05, 0x95, 0x31,
	0x9b, 0xa9, 0x2a, 0x77, 0x95, 0xad, 0x6b, 0xad, 0x5b, 0x8d, 0xa9, 0x4f, 0x6e, 0x70, 0x79, 0x7b,
	0xf6, 0xd5, 0xdf, 0x77, 0x66, 0x7a, 0x42, 0xaa, 0x7e, 0x00, 0xd6, 0x59, 0xac, 0x8f, 0x4d, 0x42,
	0xf5, 0x6e, 0xbf, 0x33, 0x41, 0x01, 0xd5, 0x71, 0x60, 0xa1, 0x76, 0xbc, 0x67, 0xdb, 0xa1, 0x48,
	0x09, 0xab, 0xe0, 0x8a, 0x69, 0xdb, 0x21, 0x22, 0x3c, 0xf8, 0xd5, 0x5e, 0x3a, 0x54, 0xbf, 0x00,
	0x6f, 0x97, 0x07, 0x10, 0x74, 0x1a, 0x58, 0xf0, 0x4d, 0x42, 0x8d, 0xc0, 0xa1, 0x06, 0x4a, 0x44,
	0x46, 0x90, 0xa8, 0x58, 0xb8, 0xd9, 0xde, 0x9b, 0xc9, 0x9a, 0xee, 0xd0, 0x93, 0xed, 0xea, 0x3a,
	0x58, 0x63, 0x81, 0x9f, 0x47, 0xd4, 0xc5, 0x5e, 0xe0, 0x7e, 0x86, 0x02, 0x5b, 0xef, 0xf6, 0xfb,
	0xb8, 0x43, 0x87, 0xc7, 0xa5, 0x38, 0x00, 0x6a, 0x99, 0x48, 0xe4, 0xee, 0x80, 0x1b, 0x58, 0x08,
	0x92, 0xfc, 0xc9, 0x37, 0x5c, 0xde, 0xba, 0xd6, 0xaa, 0xe5, 0x0a, 0x94, 0x06, 0xd1, 0xbb, 0x7d,
	0x51, 0xa5, 0xeb, 0xe9, 0x36, 0xdd, 0xa1, 0x44, 0xdd, 0xc8, 0xd4, 0xea, 0xf9, 0x80, 0xa0, 0x70,
	0x82, 0x92, 0x64, 0x1d, 0x3a, 0x6c, 0xfb, 0xd8, 0x3a, 0x48, 0x99, 0xec, 0x4c, 0x45, 0xa4, 0x32,
	0x41, 0xf5, 0x3e, 0x58, 0x66, 0x15, 0xc1, 0x42, 0xc3, 0x4b, 0x43, 0x87, 0xc6, 0x20, 0x91, 0x89,
	0xc2, 0x2c, 0xfa, 0xd9, 0x28, 0x0e, 0x4d, 0xa3, 0x94, 0xc0, 0xb0, 0xf2, 0x9d, 0x0d, 0x23, 0x64,
	0x67, 0xc1, 0x64, 0x4f, 0x49, 0x02, 0xc3, 0xcf, 0xea, 0x57, 0x05, 0x2c, 0xb3, 0x34, 0x7a, 0xb7,
	0xbf, 0x77, 0xf2, 0x94, 0xd2, 0x63, 0x82, 0x0b, 0x60, 0xce, 0xf7, 0x46, 0x1e, 0x15, 0x71, 0xf8,
	0x00, 0x2e, 0x81, 0x79, 0x1c, 0xda, 0x28, 0x34, 0x06, 0x71, 0xf5, 0x12, 0xbf, 0x55, 0x6c, 0xdc,
	0x8e, 0xe1, 0x2a, 0x00, 0x96, 0x6f, 0x7a, 0x23, 0x23, 0x79, 0x41, 0xd5, 0xcb, 0x6c, 0xf1, 0x2a,
	0x9b, 0xe9, 0xc7, 0x63, 0x94, 0xc4, 0xe3, 0x5c, 0xb3, 0x3c, 0x1e, 0x1b, 0xc0, 0xdb, 0xa0, 0x32,
	0x44, 0x9e, 0x3b, 0xa4, 0xd5, 0x39, 0x36, 0x2d, 0x46, 0x70, 0x05, 0x80, 0x88, 0x20, 0x63, 0xd2,
	0x34, 0x0e, 0x50, 0x5c, 0xad, 0xdc, 0x55, 0xb6, 0xe6, 0x7b, 0xf3, 0x11, 0x41, 0x9f, 0x37, 0x3f,
	0x42, 0xb1, 0x1a, 0x80, 0x15, 0x39, 0xba, 0xa8, 0x8c, 0x0e, 0xde, 0x48, 0x6a, 0x91, 0x71, 0x88,
	0xf4, 0xfe, 0xac, 0xe6, 0xee, 0xcf, 0x74, 0x04, 0x71, 0x85, 0x6e, 0x06, 0x0e, 0xcd, 0xc6, 0x55,
	0x37, 0xc1, 0x06, 0x7f, 0xbd, 0x28, 0xb0, 0xf9, 0x65, 0x7b, 0x36, 0xb0, 0xf6, 0x22, 0x8a, 0xbb,
	0x38, 0xfc, 0xda, 0x0c, 0xed, 0xe3, 0xbb, 0xfd, 0x52, 0x01, 0xef, 0x9c, 0xa5, 0x14, 0x8c, 0x1e,
	0x58, 0x1d, 0x73, 0x11, 0x3b, 0x37, 0x6f, 0x60, 0x19, 0x66, 0x44, 0xb1, 0xe1, 0x08, 0xa1, 0x00,
	0xde, 0xcc, 0x3b, 0x42, 0x41, 0xe0, 0xde, 0x92, 0x88, 0xa6, 0x3b, 0x34, 0x97, 0x52, 0x7d, 0x28,
	0x4e, 0xba, 0xd3, 0x7b, 0xfa, 0xb8, 0xd5, 0xec, 0xe3, 0xa7, 0xbe, 0x49, 0xc8, 0x33, 0x3b, 0x3d,
	0xe9, 0xdb, 0xa0, 0x82, 0x42, 0xeb, 0x71, 0xab, 0x29, 0x7c, 0x42, 0x8c, 0xd4, 0x77, 0x45, 0x95,
	0x4f, 0x6d, 0x13, 0x5f, 0xb0, 0x04, 0xe6, 0xad, 0x64, 0xca, 0xf0, 0x6c, 0x71, 0x49, 0xae, 0x58,
	0x5c, 0xa2, 0x3e, 0x11, 0x19, 0xc5, 0x96, 0x3e, 0xe6, 0x31, 0xd2, 0x8c, 0x25, 0x3b, 0x1f, 0x89,
	0xa4, 0xa7, 0x76, 0x8a, 0xa4, 0x05, 0xb0, 0xad, 0x1f, 0xae, 0x83, 0x39, 0xb6, 0x11, 0x86, 0xa0,
	0xc2, 0x6d, 0x13, 0xae, 0xe5, 0x6a, 0x77, 0xda, 0x97, 0x6b, 0x6a, 0x99, 0x84, 0xa7, 0x54, 0xd7,
	0xbe, 0xff, 0xf3, 0xdf, 0x97, 0x97, 0x96, 0xe1, 0x92, 0x36, 0xd5, 0x29, 0x06, 0x88, 0x9a, 0x1a,
	0xb7, 0x64, 0xf8, 0xbb, 0x02, 0x16, 0x0b, 0xdc, 0x14, 0xb6, 0x64, 0x29, 0xca, 0xbd, 0xbb, 0xb6,
	0x7b, 0xa1, 0x3d, 0x82, 0xf3, 0x3d, 0xc6, 0xf9, 0x00, 0xb6, 0x24, 0x9c, 0x38, 0x34, 0x2d, 0x1f,
	0x69, 0xc7, 0x4e, 0xce, 0x5e, 0x9f, 0xf6, 0xad, 0xe8, 0x08, 0xdf, 0xc1, 0x5f, 0x14, 0x70, 0x4b,
	0x6a, 0xc8, 0x70, 0x47, 0x86, 0x52, 0x66, 0xf0, 0xb5, 0xe6, 0x05, 0x76, 0x08, 0xf4, 0x1d, 0x86,
	0x7e, 0x0f, 0x6e, 0xc9, 0xd0, 0xd3, 0x36, 0x40, 0x50, 0x60, 0x1b, 0x14, 0x27, 0x16, 0x47, 0xe0,
	0x6f, 0x0a, 0xa8, 0xed, 0x23, 0x5a, 0x60, 0xd8, 0xc5, 0x45, 0x2f, 0x6e, 0x02, 0xc5, 0x45, 0x2f,
	0xe9, 0x08, 0xea, 0x23, 0x46, 0xbe, 0x03, 0x1b, 0x12, 0xf2, 0x92, 0x56, 0x51, 0xcc, 0xcf, 0x4e,
	0xf6, 0xbc, 0xfc, 0xd9, 0xbe, 0x71, 0x5e, 0xfe, 0xa9, 0x26, 0xf2, 0x3f, 0xf8, 0xb9, 0x71, 0xff,
	0xac, 0x00, 0xb8, 0x8f, 0x68, 0xce, 0x81, 0xe1, 0x3d, 0x19, 0x83, 0xbc, 0xc3, 0xd4, 0xee, 0x9f,
	0x4b, 0x2b, 0x38, 0xef, 0x33, 0xce, 0x0d, 0xb8, 0x2e, 0xe1, 0x0c, 0x1c, 0xba, 0x9d, 0xf5, 0x7a,
	0xf8, 0x87, 0x02, 0x56, 0xf6, 0x11, 0x2d, 0x34, 0x61, 0xf8, 0x40, 0xfa, 0xec, 0xcf, 0x70, 0xf7,
	0xda, 0xc3, 0x0b, 0xee, 0x12, 0xe8, 0x4f, 0x18, 0x7a, 0x0b, 0xee, 0xc8, 0xfc, 0xa3, 0xac, 0x05,
	0xc0, 0x9f, 0x14, 0x70, 0x33, 0xe7, 0xbe, 0xf2, 0x0a, 0xcb, 0x9d, 0x5d, 0x5e, 0xe1, 0x02, 0x3b,
	0x57, 0xb7, 0x19, 0xe6, 0x26, 0xdc, 0x90, 0x60, 0x72, 0x93, 0x4d, 0x1e, 0x5f, 0xea, 0xdb, 0x8c,
	0x2d, 0x67, 0xd2, 0x72, 0x36, 0x79, 0x0f, 0x90, 0xb3, 0x15, 0xb8, 0x7e, 0x29, 0x5b, 0x4a, 0xc4,
	0xac, 0x81, 0x71, 0xb6, 0xbf, 0x7a, 0x75, 0x58, 0x57, 0x5e, 0x1f, 0xd6, 0x95, 0x7f, 0x0e, 0xeb,
	0xca, 0x8f, 0x47, 0xf5, 0x99, 0xd7, 0x47, 0xf5, 0x99, 0xbf, 0x8e, 0xea, 0x33, 0x5f, 0xb6, 0x5d,
	0x8f, 0x0e, 0xa3, 0x41, 0xc3, 0xc2, 0x23, 0x6d, 0x9f, 0x87, 0xda, 0x6e, 0x87, 0x9e, 0xed, 0xa2,
	0xfc, 0x70, 0x84, 0xed, 0xc8, 0x47, 0xda, 0x37, 0xd9, 0x8c, 0xec, 0x7f, 0x83, 0x41, 0x85, 0xfd,
	0xa1, 0xbf, 0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x84, 0x22, 0x59, 0xba, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	LastNFTEventNonceByAddr(ctx context.Context, in *QueryLastNFTEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastNFTEventNonceByAddrResponse, error)
	OutgoingSendNFTToEths(ctx context.Context, in *QueryOutgoingSendNFTToEthsRequest, opts ...grpc.CallOption) (*QueryOutgoingSendNFTToEthsResponse, error)
	GetLastObservedNFTEthBlock(ctx context.Context, in *QueryLastObservedNFTEthBlockRequest, opts ...grpc.CallOption) (*QueryLastObservedNFTEthBlockResponse, error)
	GetLastObservedNFTEthNonce(ctx context.Context, in *QueryLastObservedNFTEthNonceRequest, opts ...grpc.CallOption) (*QueryLastObservedNFTEthNonceResponse, error)
	GetNFTAttestations(ctx context.Context, in *QueryNFTAttestationsRequest, opts ...grpc.CallOption) (*QueryNFTAttestationsResponse, error)
	GetPendingNFTIbcAutoForwards(ctx context.Context, in *QueryPendingNFTIbcAutoForwardsRequest, opts ...grpc.CallOption) (*QueryPendingNFTIbcAutoForwardsResponse, error)
	ERC721ToClassId(ctx context.Context, in *QueryERC721ToClassIdRequest, opts ...grpc.CallOption) (*QueryERC721ToClassIdResponse, error)
	ClassIdToERC721(ctx context.Context, in *QueryClassIdToERC721Request, opts ...grpc.CallOption) (*QueryClassIdToERC721Response, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastNFTEventNonceByAddr(ctx context.Context, in *QueryLastNFTEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastNFTEventNonceByAddrResponse, error) {
	out := new(QueryLastNFTEventNonceByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/LastNFTEventNonceByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingSendNFTToEths(ctx context.Context, in *QueryOutgoingSendNFTToEthsRequest, opts ...grpc.CallOption) (*QueryOutgoingSendNFTToEthsResponse, error) {
	out := new(QueryOutgoingSendNFTToEthsResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/OutgoingSendNFTToEths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastObservedNFTEthBlock(ctx context.Context, in *QueryLastObservedNFTEthBlockRequest, opts ...grpc.CallOption) (*QueryLastObservedNFTEthBlockResponse, error) {
	out := new(QueryLastObservedNFTEthBlockResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/GetLastObservedNFTEthBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastObservedNFTEthNonce(ctx context.Context, in *QueryLastObservedNFTEthNonceRequest, opts ...grpc.CallOption) (*QueryLastObservedNFTEthNonceResponse, error) {
	out := new(QueryLastObservedNFTEthNonceResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/GetLastObservedNFTEthNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNFTAttestations(ctx context.Context, in *QueryNFTAttestationsRequest, opts ...grpc.CallOption) (*QueryNFTAttestationsResponse, error) {
	out := new(QueryNFTAttestationsResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/GetNFTAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingNFTIbcAutoForwards(ctx context.Context, in *QueryPendingNFTIbcAutoForwardsRequest, opts ...grpc.CallOption) (*QueryPendingNFTIbcAutoForwardsResponse, error) {
	out := new(QueryPendingNFTIbcAutoForwardsResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/GetPendingNFTIbcAutoForwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC721ToClassId(ctx context.Context, in *QueryERC721ToClassIdRequest, opts ...grpc.CallOption) (*QueryERC721ToClassIdResponse, error) {
	out := new(QueryERC721ToClassIdResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/ERC721ToClassId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassIdToERC721(ctx context.Context, in *QueryClassIdToERC721Request, opts ...grpc.CallOption) (*QueryClassIdToERC721Response, error) {
	out := new(QueryClassIdToERC721Response)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Query/ClassIdToERC721", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	LastNFTEventNonceByAddr(context.Context, *QueryLastNFTEventNonceByAddrRequest) (*QueryLastNFTEventNonceByAddrResponse, error)
	OutgoingSendNFTToEths(context.Context, *QueryOutgoingSendNFTToEthsRequest) (*QueryOutgoingSendNFTToEthsResponse, error)
	GetLastObservedNFTEthBlock(context.Context, *QueryLastObservedNFTEthBlockRequest) (*QueryLastObservedNFTEthBlockResponse, error)
	GetLastObservedNFTEthNonce(context.Context, *QueryLastObservedNFTEthNonceRequest) (*QueryLastObservedNFTEthNonceResponse, error)
	GetNFTAttestations(context.Context, *QueryNFTAttestationsRequest) (*QueryNFTAttestationsResponse, error)
	GetPendingNFTIbcAutoForwards(context.Context, *QueryPendingNFTIbcAutoForwardsRequest) (*QueryPendingNFTIbcAutoForwardsResponse, error)
	ERC721ToClassId(context.Context, *QueryERC721ToClassIdRequest) (*QueryERC721ToClassIdResponse, error)
	ClassIdToERC721(context.Context, *QueryClassIdToERC721Request) (*QueryClassIdToERC721Response, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LastNFTEventNonceByAddr(ctx context.Context, req *QueryLastNFTEventNonceByAddrRequest) (*QueryLastNFTEventNonceByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastNFTEventNonceByAddr not implemented")
}
func (*UnimplementedQueryServer) OutgoingSendNFTToEths(ctx context.Context, req *QueryOutgoingSendNFTToEthsRequest) (*QueryOutgoingSendNFTToEthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingSendNFTToEths not implemented")
}
func (*UnimplementedQueryServer) GetLastObservedNFTEthBlock(ctx context.Context, req *QueryLastObservedNFTEthBlockRequest) (*QueryLastObservedNFTEthBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastObservedNFTEthBlock not implemented")
}
func (*UnimplementedQueryServer) GetLastObservedNFTEthNonce(ctx context.Context, req *QueryLastObservedNFTEthNonceRequest) (*QueryLastObservedNFTEthNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastObservedNFTEthNonce not implemented")
}
func (*UnimplementedQueryServer) GetNFTAttestations(ctx context.Context, req *QueryNFTAttestationsRequest) (*QueryNFTAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNFTAttestations not implemented")
}
func (*UnimplementedQueryServer) GetPendingNFTIbcAutoForwards(ctx context.Context, req *QueryPendingNFTIbcAutoForwardsRequest) (*QueryPendingNFTIbcAutoForwardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingNFTIbcAutoForwards not implemented")
}
func (*UnimplementedQueryServer) ERC721ToClassId(ctx context.Context, req *QueryERC721ToClassIdRequest) (*QueryERC721ToClassIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC721ToClassId not implemented")
}
func (*UnimplementedQueryServer) ClassIdToERC721(ctx context.Context, req *QueryClassIdToERC721Request) (*QueryClassIdToERC721Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassIdToERC721 not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastNFTEventNonceByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastNFTEventNonceByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastNFTEventNonceByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/LastNFTEventNonceByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastNFTEventNonceByAddr(ctx, req.(*QueryLastNFTEventNonceByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingSendNFTToEths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingSendNFTToEthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingSendNFTToEths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/OutgoingSendNFTToEths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingSendNFTToEths(ctx, req.(*QueryOutgoingSendNFTToEthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastObservedNFTEthBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastObservedNFTEthBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastObservedNFTEthBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/GetLastObservedNFTEthBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastObservedNFTEthBlock(ctx, req.(*QueryLastObservedNFTEthBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastObservedNFTEthNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastObservedNFTEthNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastObservedNFTEthNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/GetLastObservedNFTEthNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastObservedNFTEthNonce(ctx, req.(*QueryLastObservedNFTEthNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNFTAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNFTAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNFTAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/GetNFTAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNFTAttestations(ctx, req.(*QueryNFTAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingNFTIbcAutoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingNFTIbcAutoForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingNFTIbcAutoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/GetPendingNFTIbcAutoForwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingNFTIbcAutoForwards(ctx, req.(*QueryPendingNFTIbcAutoForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC721ToClassId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC721ToClassIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC721ToClassId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/ERC721ToClassId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC721ToClassId(ctx, req.(*QueryERC721ToClassIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassIdToERC721_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassIdToERC721Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassIdToERC721(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Query/ClassIdToERC721",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassIdToERC721(ctx, req.(*QueryClassIdToERC721Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravitynft.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LastNFTEventNonceByAddr",
			Handler:    _Query_LastNFTEventNonceByAddr_Handler,
		},
		{
			MethodName: "OutgoingSendNFTToEths",
			Handler:    _Query_OutgoingSendNFTToEths_Handler,
		},
		{
			MethodName: "GetLastObservedNFTEthBlock",
			Handler:    _Query_GetLastObservedNFTEthBlock_Handler,
		},
		{
			MethodName: "GetLastObservedNFTEthNonce",
			Handler:    _Query_GetLastObservedNFTEthNonce_Handler,
		},
		{
			MethodName: "GetNFTAttestations",
			Handler:    _Query_GetNFTAttestations_Handler,
		},
		{
			MethodName: "GetPendingNFTIbcAutoForwards",
			Handler:    _Query_GetPendingNFTIbcAutoForwards_Handler,
		},
		{
			MethodName: "ERC721ToClassId",
			Handler:    _Query_ERC721ToClassId_Handler,
		},
		{
			MethodName: "ClassIdToERC721",
			Handler:    _Query_ClassIdToERC721_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravitynft/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLastNFTEventNonceByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNFTEventNonceByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNFTEventNonceByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastNFTEventNonceByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNFTEventNonceByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNFTEventNonceByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastNftEventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastNftEventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingSendNFTToEthsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingSendNFTToEthsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingSendNFTToEthsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingSendNFTToEthsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingSendNFTToEthsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingSendNFTToEthsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutgoingNfts) > 0 {
		for iNdEx := len(m.OutgoingNfts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutgoingNfts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastObservedNFTEthBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastObservedNFTEthBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastObservedNFTEthBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastObservedNFTEthBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastObservedNFTEthBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastObservedNFTEthBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObservedNftEthBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastObservedNftEthBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastObservedNFTEthNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastObservedNFTEthNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastObservedNFTEthNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastObservedNFTEthNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastObservedNFTEthNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastObservedNFTEthNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObservedNftEthNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastObservedNftEthNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNFTAttestationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNFTAttestationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNFTAttestationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseV1Key {
		i--
		if m.UseV1Key {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClaimType) > 0 {
		i -= len(m.ClaimType)
		copy(dAtA[i:], m.ClaimType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNFTAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNFTAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNFTAttestationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftAttestations) > 0 {
		for iNdEx := len(m.NftAttestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftAttestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingNFTIbcAutoForwardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNFTIbcAutoForwardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNFTIbcAutoForwardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPendingNFTIbcAutoForwardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingNFTIbcAutoForwardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingNFTIbcAutoForwardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingNftIbcAutoForwards) > 0 {
		for iNdEx := len(m.PendingNftIbcAutoForwards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingNftIbcAutoForwards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryERC721ToClassIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC721ToClassIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC721ToClassIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc721) > 0 {
		i -= len(m.Erc721)
		copy(dAtA[i:], m.Erc721)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc721)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryERC721ToClassIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC721ToClassIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC721ToClassIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassIdToERC721Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassIdToERC721Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassIdToERC721Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassIdToERC721Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassIdToERC721Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassIdToERC721Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc721) > 0 {
		i -= len(m.Erc721)
		copy(dAtA[i:], m.Erc721)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc721)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLastNFTEventNonceByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastNFTEventNonceByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastNftEventNonce != 0 {
		n += 1 + sovQuery(uint64(m.LastNftEventNonce))
	}
	return n
}

func (m *QueryOutgoingSendNFTToEthsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOutgoingSendNFTToEthsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutgoingNfts) > 0 {
		for _, e := range m.OutgoingNfts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastObservedNFTEthBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastObservedNFTEthBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObservedNftEthBlock != 0 {
		n += 1 + sovQuery(uint64(m.LastObservedNftEthBlock))
	}
	return n
}

func (m *QueryLastObservedNFTEthNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastObservedNFTEthNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObservedNftEthNonce != 0 {
		n += 1 + sovQuery(uint64(m.LastObservedNftEthNonce))
	}
	return n
}

func (m *QueryNFTAttestationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ClaimType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.UseV1Key {
		n += 2
	}
	return n
}

func (m *QueryNFTAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftAttestations) > 0 {
		for _, e := range m.NftAttestations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingNFTIbcAutoForwardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPendingNFTIbcAutoForwardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingNftIbcAutoForwards) > 0 {
		for _, e := range m.PendingNftIbcAutoForwards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryERC721ToClassIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc721)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryERC721ToClassIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovQuery(uint64(m.ClassId))
	}
	return n
}

func (m *QueryClassIdToERC721Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovQuery(uint64(m.ClassId))
	}
	return n
}

func (m *QueryClassIdToERC721Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc721)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNFTEventNonceByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNFTEventNonceByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNFTEventNonceByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNFTEventNonceByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNFTEventNonceByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNFTEventNonceByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNftEventNonce", wireType)
			}
			m.LastNftEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastNftEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingSendNFTToEthsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingSendNFTToEthsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingSendNFTToEthsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingSendNFTToEthsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingSendNFTToEthsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingSendNFTToEthsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingNfts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingNfts = append(m.OutgoingNfts, OutgoingNFT{})
			if err := m.OutgoingNfts[len(m.OutgoingNfts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastObservedNFTEthBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastObservedNFTEthBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNftEthBlock", wireType)
			}
			m.LastObservedNftEthBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNftEthBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastObservedNFTEthNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastObservedNFTEthNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastObservedNFTEthNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNftEthNonce", wireType)
			}
			m.LastObservedNftEthNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNftEthNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNFTAttestationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNFTAttestationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNFTAttestationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseV1Key", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseV1Key = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNFTAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNFTAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNFTAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAttestations = append(m.NftAttestations, NFTAttestation{})
			if err := m.NftAttestations[len(m.NftAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNFTIbcAutoForwardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNFTIbcAutoForwardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNFTIbcAutoForwardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingNFTIbcAutoForwardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingNFTIbcAutoForwardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingNFTIbcAutoForwardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNftIbcAutoForwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingNftIbcAutoForwards = append(m.PendingNftIbcAutoForwards, &PendingNFTIbcAutoForward{})
			if err := m.PendingNftIbcAutoForwards[len(m.PendingNftIbcAutoForwards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC721ToClassIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC721ToClassIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC721ToClassIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc721", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc721 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC721ToClassIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC721ToClassIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC721ToClassIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassIdToERC721Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassIdToERC721Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassIdToERC721Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassIdToERC721Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassIdToERC721Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassIdToERC721Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc721", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc721 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
