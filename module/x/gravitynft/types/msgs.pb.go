// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/gravitynft parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// UnhaltBridgeProposal is meant to be used by governance (authority) to restoring
// the bridge after an oracle disagreement. Once this proposal is passed the nft bridge state will roll back events
// to the nonce provided in target_nonce if and only if those events have not yet been observed (executed on the Cosmos chain). This allows for easy
// handling of cases where for example an Ethereum hardfork has occurred and more than 1/3 of the validator set
// disagrees with the rest. Normally this would require a chain halt, manual genesis editing and restore to resolve
// with this feature a governance proposal can be used instead
type MsgUnhaltNFTBridge struct {
	// authority is the address that controls the module (defaults to x/gov).
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	TargetNonce uint64 `protobuf:"varint,2,opt,name=target_nonce,json=targetNonce,proto3" json:"target_nonce,omitempty"`
}

func (m *MsgUnhaltNFTBridge) Reset()         { *m = MsgUnhaltNFTBridge{} }
func (m *MsgUnhaltNFTBridge) String() string { return proto.CompactTextString(m) }
func (*MsgUnhaltNFTBridge) ProtoMessage()    {}
func (*MsgUnhaltNFTBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{2}
}
func (m *MsgUnhaltNFTBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnhaltNFTBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnhaltNFTBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnhaltNFTBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnhaltNFTBridge.Merge(m, src)
}
func (m *MsgUnhaltNFTBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnhaltNFTBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnhaltNFTBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnhaltNFTBridge proto.InternalMessageInfo

func (m *MsgUnhaltNFTBridge) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUnhaltNFTBridge) GetTargetNonce() uint64 {
	if m != nil {
		return m.TargetNonce
	}
	return 0
}

type MsgUnhaltNFTBridgeResponse struct {
}

func (m *MsgUnhaltNFTBridgeResponse) Reset()         { *m = MsgUnhaltNFTBridgeResponse{} }
func (m *MsgUnhaltNFTBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnhaltNFTBridgeResponse) ProtoMessage()    {}
func (*MsgUnhaltNFTBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{3}
}
func (m *MsgUnhaltNFTBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnhaltNFTBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnhaltNFTBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnhaltNFTBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnhaltNFTBridgeResponse.Merge(m, src)
}
func (m *MsgUnhaltNFTBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnhaltNFTBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnhaltNFTBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnhaltNFTBridgeResponse proto.InternalMessageInfo

// MsgSendNFTToCosmosClaim
// When more than 66% of the active validator set has
// claimed to have seen the NFT deposit enter the ethereum blockchain NFT is minted and
// issued to the Cosmos address in question
// -------------
type MsgSendNFTToCosmosClaim struct {
	EventNonce     uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight uint64 `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	TokenContract  string `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	TokenId        string `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenUri       string `protobuf:"bytes,5,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	EthereumSender string `protobuf:"bytes,6,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	CosmosReceiver string `protobuf:"bytes,7,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	Orchestrator   string `protobuf:"bytes,8,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSendNFTToCosmosClaim) Reset()         { *m = MsgSendNFTToCosmosClaim{} }
func (m *MsgSendNFTToCosmosClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToCosmosClaim) ProtoMessage()    {}
func (*MsgSendNFTToCosmosClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{4}
}
func (m *MsgSendNFTToCosmosClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToCosmosClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToCosmosClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToCosmosClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToCosmosClaim.Merge(m, src)
}
func (m *MsgSendNFTToCosmosClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToCosmosClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToCosmosClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToCosmosClaim proto.InternalMessageInfo

func (m *MsgSendNFTToCosmosClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendNFTToCosmosClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgSendNFTToCosmosClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSendNFTToCosmosClaimResponse struct {
}

func (m *MsgSendNFTToCosmosClaimResponse) Reset()         { *m = MsgSendNFTToCosmosClaimResponse{} }
func (m *MsgSendNFTToCosmosClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToCosmosClaimResponse) ProtoMessage()    {}
func (*MsgSendNFTToCosmosClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{5}
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToCosmosClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToCosmosClaimResponse.Merge(m, src)
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToCosmosClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToCosmosClaimResponse proto.InternalMessageInfo

type EventClaim struct {
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ClaimHash     string `protobuf:"bytes,2,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	AttestationId string `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (m *EventClaim) Reset()         { *m = EventClaim{} }
func (m *EventClaim) String() string { return proto.CompactTextString(m) }
func (*EventClaim) ProtoMessage()    {}
func (*EventClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{6}
}
func (m *EventClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaim.Merge(m, src)
}
func (m *EventClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaim proto.InternalMessageInfo

func (m *EventClaim) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventClaim) GetClaimHash() string {
	if m != nil {
		return m.ClaimHash
	}
	return ""
}

func (m *EventClaim) GetAttestationId() string {
	if m != nil {
		return m.AttestationId
	}
	return ""
}

// MsgSendNFTToEth
// When a user wants to send an NFT to Ethereum they must first call this function
// -------------
type MsgSendNFTToEth struct {
	ClassId          string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId          string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	CosmosSender     string `protobuf:"bytes,3,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	EthereumReceiver string `protobuf:"bytes,4,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty"`
	Orchestrator     string `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSendNFTToEth) Reset()         { *m = MsgSendNFTToEth{} }
func (m *MsgSendNFTToEth) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToEth) ProtoMessage()    {}
func (*MsgSendNFTToEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{7}
}
func (m *MsgSendNFTToEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToEth.Merge(m, src)
}
func (m *MsgSendNFTToEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToEth proto.InternalMessageInfo

func (m *MsgSendNFTToEth) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgSendNFTToEth) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgSendNFTToEth) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgSendNFTToEth) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

func (m *MsgSendNFTToEth) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSendNFTToEthResponse struct {
}

func (m *MsgSendNFTToEthResponse) Reset()         { *m = MsgSendNFTToEthResponse{} }
func (m *MsgSendNFTToEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToEthResponse) ProtoMessage()    {}
func (*MsgSendNFTToEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{8}
}
func (m *MsgSendNFTToEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToEthResponse.Merge(m, src)
}
func (m *MsgSendNFTToEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToEthResponse proto.InternalMessageInfo

// MsgExecuteIbcNFTAutoForwards
// Prompts the forwarding of Pending IBC Auto-Forwards in the queue
// The Pending forwards will be executed in order of their original SendNFTToCosmos.EventNonce
// The tokens in the queue will be sent to a local gravity-prefixed address if IBC transfer is not possible
// -------------
type MsgExecuteIbcNFTAutoForwards struct {
	ForwardsToClear uint64 `protobuf:"varint,1,opt,name=forwards_to_clear,json=forwardsToClear,proto3" json:"forwards_to_clear,omitempty"`
	Executor        string `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (m *MsgExecuteIbcNFTAutoForwards) Reset()         { *m = MsgExecuteIbcNFTAutoForwards{} }
func (m *MsgExecuteIbcNFTAutoForwards) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteIbcNFTAutoForwards) ProtoMessage()    {}
func (*MsgExecuteIbcNFTAutoForwards) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{9}
}
func (m *MsgExecuteIbcNFTAutoForwards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteIbcNFTAutoForwards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteIbcNFTAutoForwards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteIbcNFTAutoForwards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteIbcNFTAutoForwards.Merge(m, src)
}
func (m *MsgExecuteIbcNFTAutoForwards) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteIbcNFTAutoForwards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteIbcNFTAutoForwards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteIbcNFTAutoForwards proto.InternalMessageInfo

func (m *MsgExecuteIbcNFTAutoForwards) GetForwardsToClear() uint64 {
	if m != nil {
		return m.ForwardsToClear
	}
	return 0
}

func (m *MsgExecuteIbcNFTAutoForwards) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

type MsgExecuteIbcNFTAutoForwardsResponse struct {
}

func (m *MsgExecuteIbcNFTAutoForwardsResponse) Reset()         { *m = MsgExecuteIbcNFTAutoForwardsResponse{} }
func (m *MsgExecuteIbcNFTAutoForwardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteIbcNFTAutoForwardsResponse) ProtoMessage()    {}
func (*MsgExecuteIbcNFTAutoForwardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{10}
}
func (m *MsgExecuteIbcNFTAutoForwardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteIbcNFTAutoForwardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteIbcNFTAutoForwardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteIbcNFTAutoForwardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteIbcNFTAutoForwardsResponse.Merge(m, src)
}
func (m *MsgExecuteIbcNFTAutoForwardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteIbcNFTAutoForwardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteIbcNFTAutoForwardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteIbcNFTAutoForwardsResponse proto.InternalMessageInfo

// MsgSendNFTToEthClaim claims that an NFT has been received on Ethereum
// -------------
type MsgSendNFTToEthClaim struct {
	EventNonce       uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight   uint64 `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	TokenContract    string `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	TokenId          string `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	CosmosSender     string `protobuf:"bytes,6,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	EthereumReceiver string `protobuf:"bytes,7,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty"`
	Orchestrator     string `protobuf:"bytes,8,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSendNFTToEthClaim) Reset()         { *m = MsgSendNFTToEthClaim{} }
func (m *MsgSendNFTToEthClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToEthClaim) ProtoMessage()    {}
func (*MsgSendNFTToEthClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{11}
}
func (m *MsgSendNFTToEthClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToEthClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToEthClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToEthClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToEthClaim.Merge(m, src)
}
func (m *MsgSendNFTToEthClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToEthClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToEthClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToEthClaim proto.InternalMessageInfo

func (m *MsgSendNFTToEthClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendNFTToEthClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgSendNFTToEthClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgSendNFTToEthClaim) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgSendNFTToEthClaim) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgSendNFTToEthClaim) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

func (m *MsgSendNFTToEthClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSendNFTToEthClaimResponse struct {
}

func (m *MsgSendNFTToEthClaimResponse) Reset()         { *m = MsgSendNFTToEthClaimResponse{} }
func (m *MsgSendNFTToEthClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToEthClaimResponse) ProtoMessage()    {}
func (*MsgSendNFTToEthClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{12}
}
func (m *MsgSendNFTToEthClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToEthClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToEthClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToEthClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToEthClaimResponse.Merge(m, src)
}
func (m *MsgSendNFTToEthClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToEthClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToEthClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToEthClaimResponse proto.InternalMessageInfo

// MsgERC721DeployedClaim claims that an ERC721 contract has been deployed on Ethereum
// -------------
type MsgERC721DeployedClaim struct {
	EventNonce     uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight uint64 `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	TokenContract  string `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	ClassId        string `protobuf:"bytes,4,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Orchestrator   string `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgERC721DeployedClaim) Reset()         { *m = MsgERC721DeployedClaim{} }
func (m *MsgERC721DeployedClaim) String() string { return proto.CompactTextString(m) }
func (*MsgERC721DeployedClaim) ProtoMessage()    {}
func (*MsgERC721DeployedClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{13}
}
func (m *MsgERC721DeployedClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgERC721DeployedClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgERC721DeployedClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgERC721DeployedClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgERC721DeployedClaim.Merge(m, src)
}
func (m *MsgERC721DeployedClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgERC721DeployedClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgERC721DeployedClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgERC721DeployedClaim proto.InternalMessageInfo

func (m *MsgERC721DeployedClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgERC721DeployedClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgERC721DeployedClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgERC721DeployedClaim) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *MsgERC721DeployedClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgERC721DeployedClaimResponse struct {
}

func (m *MsgERC721DeployedClaimResponse) Reset()         { *m = MsgERC721DeployedClaimResponse{} }
func (m *MsgERC721DeployedClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgERC721DeployedClaimResponse) ProtoMessage()    {}
func (*MsgERC721DeployedClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{14}
}
func (m *MsgERC721DeployedClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgERC721DeployedClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgERC721DeployedClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgERC721DeployedClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgERC721DeployedClaimResponse.Merge(m, src)
}
func (m *MsgERC721DeployedClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgERC721DeployedClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgERC721DeployedClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgERC721DeployedClaimResponse proto.InternalMessageInfo

// MsgCancelSendNFTToEth cancels a pending NFT send to Ethereum
// -------------
type MsgCancelSendNFTToEth struct {
	EventNonce   uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgCancelSendNFTToEth) Reset()         { *m = MsgCancelSendNFTToEth{} }
func (m *MsgCancelSendNFTToEth) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendNFTToEth) ProtoMessage()    {}
func (*MsgCancelSendNFTToEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{15}
}
func (m *MsgCancelSendNFTToEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendNFTToEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendNFTToEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendNFTToEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendNFTToEth.Merge(m, src)
}
func (m *MsgCancelSendNFTToEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendNFTToEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendNFTToEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendNFTToEth proto.InternalMessageInfo

func (m *MsgCancelSendNFTToEth) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgCancelSendNFTToEth) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgCancelSendNFTToEthResponse struct {
}

func (m *MsgCancelSendNFTToEthResponse) Reset()         { *m = MsgCancelSendNFTToEthResponse{} }
func (m *MsgCancelSendNFTToEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendNFTToEthResponse) ProtoMessage()    {}
func (*MsgCancelSendNFTToEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{16}
}
func (m *MsgCancelSendNFTToEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendNFTToEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendNFTToEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendNFTToEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendNFTToEthResponse.Merge(m, src)
}
func (m *MsgCancelSendNFTToEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendNFTToEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendNFTToEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendNFTToEthResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "gravitynft.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "gravitynft.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUnhaltNFTBridge)(nil), "gravitynft.v1.MsgUnhaltNFTBridge")
	proto.RegisterType((*MsgUnhaltNFTBridgeResponse)(nil), "gravitynft.v1.MsgUnhaltNFTBridgeResponse")
	proto.RegisterType((*MsgSendNFTToCosmosClaim)(nil), "gravitynft.v1.MsgSendNFTToCosmosClaim")
	proto.RegisterType((*MsgSendNFTToCosmosClaimResponse)(nil), "gravitynft.v1.MsgSendNFTToCosmosClaimResponse")
	proto.RegisterType((*EventClaim)(nil), "gravitynft.v1.EventClaim")
	proto.RegisterType((*MsgSendNFTToEth)(nil), "gravitynft.v1.MsgSendNFTToEth")
	proto.RegisterType((*MsgSendNFTToEthResponse)(nil), "gravitynft.v1.MsgSendNFTToEthResponse")
	proto.RegisterType((*MsgExecuteIbcNFTAutoForwards)(nil), "gravitynft.v1.MsgExecuteIbcNFTAutoForwards")
	proto.RegisterType((*MsgExecuteIbcNFTAutoForwardsResponse)(nil), "gravitynft.v1.MsgExecuteIbcNFTAutoForwardsResponse")
	proto.RegisterType((*MsgSendNFTToEthClaim)(nil), "gravitynft.v1.MsgSendNFTToEthClaim")
	proto.RegisterType((*MsgSendNFTToEthClaimResponse)(nil), "gravitynft.v1.MsgSendNFTToEthClaimResponse")
	proto.RegisterType((*MsgERC721DeployedClaim)(nil), "gravitynft.v1.MsgERC721DeployedClaim")
	proto.RegisterType((*MsgERC721DeployedClaimResponse)(nil), "gravitynft.v1.MsgERC721DeployedClaimResponse")
	proto.RegisterType((*MsgCancelSendNFTToEth)(nil), "gravitynft.v1.MsgCancelSendNFTToEth")
	proto.RegisterType((*MsgCancelSendNFTToEthResponse)(nil), "gravitynft.v1.MsgCancelSendNFTToEthResponse")
}

func init() { proto.RegisterFile("gravitynft/v1/msgs.proto", fileDescriptor_15bd2f46fa3ae18d) }

var fileDescriptor_15bd2f46fa3ae18d = []byte{
	// 1067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x4f, 0xdc, 0x46,
	0x14, 0xc6, 0x1b, 0x02, 0xec, 0xe3, 0x57, 0x70, 0x49, 0xbb, 0x38, 0xc4, 0x80, 0xc3, 0xaf, 0x14,
	0xd8, 0x15, 0x50, 0x29, 0xe7, 0xb2, 0x85, 0x86, 0x03, 0xa8, 0xda, 0xc0, 0xa5, 0x8a, 0x64, 0xcd,
	0xda, 0x0f, 0xdb, 0x8a, 0xd7, 0xb3, 0x9a, 0x99, 0xdd, 0x06, 0xa9, 0xea, 0xa1, 0xb7, 0xde, 0x2a,
	0xe5, 0x50, 0xe5, 0xd4, 0x3f, 0x22, 0xa7, 0x1e, 0x7a, 0x4f, 0x6f, 0x91, 0x7a, 0xe9, 0xa9, 0xaa,
	0xa0, 0x7f, 0x48, 0xe5, 0x19, 0xaf, 0x13, 0x7b, 0xcd, 0xb2, 0x3d, 0xb5, 0xb7, 0x9d, 0xef, 0x7d,
	0x7e, 0xef, 0x9b, 0xef, 0xcd, 0xbc, 0x59, 0xa8, 0x78, 0x8c, 0x74, 0x03, 0x71, 0x19, 0x5d, 0x88,
	0x5a, 0x77, 0xb7, 0xd6, 0xe2, 0x1e, 0xaf, 0xb6, 0x19, 0x15, 0x54, 0x9f, 0x7e, 0x1f, 0xa9, 0x76,
	0x77, 0x8d, 0x05, 0x87, 0xf2, 0x16, 0xe5, 0xb6, 0x0c, 0xd6, 0xd4, 0x42, 0x31, 0x8d, 0x45, 0x8f,
	0x52, 0x2f, 0xc4, 0x1a, 0x69, 0x07, 0x35, 0x12, 0x45, 0x54, 0x10, 0x11, 0xd0, 0xa8, 0x17, 0x9d,
	0xf7, 0xa8, 0x47, 0xd5, 0x57, 0xf1, 0xaf, 0x04, 0x7d, 0x90, 0xad, 0xeb, 0x61, 0x84, 0x3c, 0x48,
	0x3e, 0xb1, 0x5c, 0x98, 0x3d, 0xe1, 0xde, 0x79, 0xdb, 0x25, 0x02, 0xbf, 0x22, 0x8c, 0xb4, 0xb8,
	0xbe, 0x08, 0x65, 0xd2, 0x11, 0x3e, 0x65, 0x81, 0xb8, 0xac, 0x68, 0xcb, 0xda, 0x66, 0xb9, 0xf1,
	0x1e, 0xd0, 0xf7, 0x61, 0xac, 0x2d, 0x79, 0x95, 0xd2, 0xb2, 0xb6, 0x39, 0xb9, 0x77, 0xbf, 0x9a,
	0x11, 0x5f, 0x55, 0x49, 0x0e, 0x46, 0xdf, 0xfe, 0xb9, 0x34, 0xd2, 0x48, 0xa8, 0xd6, 0x02, 0x7c,
	0x92, 0xab, 0xd2, 0x40, 0xde, 0xa6, 0x11, 0x47, 0xeb, 0x1c, 0xf4, 0x38, 0x14, 0xf9, 0x24, 0x14,
	0xa7, 0x47, 0x67, 0x07, 0x2c, 0x70, 0x3d, 0xbc, 0x45, 0xc3, 0x0a, 0x4c, 0x09, 0xc2, 0x3c, 0x14,
	0x76, 0x44, 0x23, 0x07, 0xa5, 0x92, 0xd1, 0xc6, 0xa4, 0xc2, 0x4e, 0x63, 0xc8, 0x5a, 0x04, 0xa3,
	0x3f, 0x6d, 0x5a, 0xf4, 0x97, 0x92, 0x14, 0xf4, 0x0c, 0x23, 0xf7, 0xf4, 0xe8, 0xec, 0x8c, 0xd6,
	0xa5, 0xc7, 0xf5, 0x90, 0x04, 0x2d, 0x7d, 0x09, 0x26, 0xb1, 0x8b, 0x51, 0x2f, 0xb7, 0x26, 0x73,
	0x83, 0x84, 0x64, 0x6a, 0x7d, 0x13, 0xee, 0xa1, 0xf0, 0xed, 0x66, 0x48, 0x9d, 0x17, 0xb6, 0x8f,
	0x81, 0xe7, 0x8b, 0x44, 0xc1, 0x0c, 0x0a, 0xff, 0x20, 0x86, 0x9f, 0x4a, 0x54, 0x5f, 0x83, 0x19,
	0x41, 0x5f, 0x60, 0x64, 0x3b, 0x34, 0x12, 0x8c, 0x38, 0xa2, 0x72, 0x47, 0x6e, 0x65, 0x5a, 0xa2,
	0xf5, 0x04, 0xd4, 0x17, 0x60, 0x42, 0xd1, 0x02, 0xb7, 0x32, 0x2a, 0x09, 0xe3, 0x72, 0x7d, 0xec,
	0xea, 0x0f, 0xa0, 0xac, 0x42, 0x1d, 0x16, 0x54, 0xee, 0xca, 0x98, 0xe2, 0x9e, 0xb3, 0x40, 0xdf,
	0x80, 0x59, 0x14, 0x3e, 0x32, 0xec, 0xb4, 0x6c, 0x8e, 0x91, 0x8b, 0xac, 0x32, 0x26, 0x29, 0x33,
	0x3d, 0xf8, 0x99, 0x44, 0x63, 0x62, 0x72, 0xa4, 0x18, 0x3a, 0x18, 0x74, 0x91, 0x55, 0xc6, 0x15,
	0x51, 0xc1, 0x8d, 0x04, 0xd5, 0x2d, 0x98, 0xa2, 0xcc, 0xf1, 0x91, 0x0b, 0x46, 0x04, 0x65, 0x95,
	0x09, 0xc9, 0xca, 0x60, 0xd6, 0x0a, 0x2c, 0xdd, 0x60, 0x5d, 0x6a, 0x6f, 0x08, 0x70, 0x18, 0xfb,
	0xa5, 0x0c, 0xad, 0xc0, 0x78, 0x0b, 0x39, 0x27, 0x1e, 0x26, 0x9d, 0xec, 0x2d, 0xf5, 0x87, 0x00,
	0x4e, 0x4c, 0xb1, 0x7d, 0xc2, 0x7d, 0xe9, 0x61, 0xb9, 0x51, 0x96, 0xc8, 0x53, 0xc2, 0xfd, 0xd8,
	0x3e, 0x22, 0x04, 0x72, 0x75, 0xc8, 0x63, 0x77, 0x12, 0xfb, 0x3e, 0x40, 0x8f, 0x5d, 0xeb, 0x57,
	0x4d, 0x9e, 0xe1, 0x54, 0xd1, 0xa1, 0xf0, 0x63, 0x4b, 0x9d, 0x90, 0x70, 0x1e, 0x7f, 0x94, 0x14,
	0x95, 0xeb, 0x63, 0x37, 0xe3, 0x76, 0x29, 0xeb, 0xf6, 0x23, 0x98, 0x4e, 0x7c, 0x4a, 0xec, 0x54,
	0xf5, 0xa6, 0x14, 0x98, 0x98, 0xb9, 0x05, 0x73, 0xa9, 0xeb, 0xa9, 0x9d, 0xaa, 0x6d, 0xf7, 0x7a,
	0x81, 0x1b, 0x0d, 0xbd, 0x5b, 0x60, 0xe8, 0x42, 0xf6, 0x2c, 0x1e, 0x0a, 0x3f, 0x35, 0xf2, 0x02,
	0x16, 0x4f, 0xb8, 0x77, 0xf8, 0x12, 0x9d, 0x8e, 0xc0, 0xe3, 0xa6, 0x73, 0x7a, 0x74, 0xf6, 0x79,
	0x47, 0xd0, 0x23, 0xca, 0xbe, 0x21, 0xcc, 0xe5, 0xfa, 0xa7, 0x30, 0x77, 0x91, 0xfc, 0xb6, 0x05,
	0xb5, 0x9d, 0x10, 0x09, 0x4b, 0x4e, 0xec, 0x6c, 0x2f, 0x70, 0x46, 0xeb, 0x31, 0xac, 0x1b, 0x30,
	0x81, 0x32, 0x11, 0x65, 0xc9, 0xbe, 0xd3, 0xb5, 0xb5, 0x0e, 0xab, 0x83, 0xea, 0xa4, 0x7a, 0x5e,
	0x97, 0x60, 0x3e, 0xa7, 0xf5, 0x7f, 0x78, 0x69, 0xfa, 0xda, 0x38, 0x36, 0x6c, 0x1b, 0xc7, 0x87,
	0x6c, 0x63, 0xd1, 0xbd, 0x30, 0x65, 0xaf, 0xfa, 0xac, 0x49, 0xbd, 0xfb, 0x4d, 0x83, 0x8f, 0x63,
	0x93, 0x1b, 0xf5, 0x27, 0x7b, 0xbb, 0x5f, 0x60, 0x3b, 0xa4, 0x97, 0xe8, 0xfe, 0x87, 0xee, 0xa5,
	0xf7, 0x63, 0x34, 0x7b, 0x3f, 0x86, 0x39, 0xb2, 0xcb, 0x60, 0x16, 0x6f, 0x25, 0xdd, 0xed, 0x73,
	0xb8, 0x7f, 0xc2, 0xbd, 0x3a, 0x89, 0x1c, 0x0c, 0x33, 0x37, 0xf3, 0xd6, 0xbd, 0xe6, 0xeb, 0x97,
	0x0a, 0xea, 0x2f, 0xc1, 0xc3, 0xc2, 0xec, 0xbd, 0xf2, 0x7b, 0x6f, 0xca, 0x70, 0xe7, 0x84, 0x7b,
	0xfa, 0xb7, 0x30, 0x95, 0x79, 0xdb, 0xcc, 0xdc, 0x6b, 0x95, 0x7b, 0x95, 0x8c, 0xf5, 0xc1, 0xf1,
	0x74, 0x7b, 0xab, 0xdf, 0xff, 0xfe, 0xf7, 0xab, 0x92, 0x69, 0x2d, 0xd6, 0xb2, 0x8f, 0x6b, 0x47,
	0x92, 0x6d, 0xf5, 0xec, 0xe9, 0x3f, 0x68, 0x30, 0x9b, 0x7f, 0xd9, 0x56, 0x0a, 0x2a, 0x64, 0x29,
	0xc6, 0xe3, 0x5b, 0x29, 0xa9, 0x8e, 0x4d, 0xa9, 0xc3, 0xb2, 0x96, 0xf3, 0x3a, 0x24, 0xdf, 0x8e,
	0x2e, 0x84, 0xdd, 0x54, 0x75, 0x7f, 0xd6, 0x60, 0xbe, 0xf0, 0xbd, 0x2b, 0xd8, 0x72, 0x11, 0xcf,
	0xa8, 0x0e, 0xc7, 0x4b, 0xa5, 0xd5, 0xa4, 0xb4, 0xc7, 0xd6, 0x46, 0x4e, 0x5a, 0x7c, 0x27, 0xa5,
	0xb0, 0x78, 0x60, 0xa9, 0x6b, 0x2a, 0x47, 0xbe, 0xfe, 0x1d, 0x4c, 0x65, 0x4e, 0x8a, 0x39, 0xa0,
	0xe0, 0xa1, 0xf0, 0x8d, 0xf5, 0xc1, 0xf1, 0x54, 0xc8, 0xba, 0x14, 0xb2, 0x6c, 0x99, 0x03, 0x84,
	0xa0, 0xf0, 0xf5, 0x37, 0x1a, 0x2c, 0xdc, 0x3c, 0x6a, 0xb7, 0xfa, 0xab, 0xdd, 0x48, 0x36, 0xf6,
	0xff, 0x05, 0x39, 0xd5, 0xf9, 0x99, 0xd4, 0x59, 0xb5, 0xb6, 0x73, 0x3a, 0xd5, 0x94, 0x46, 0x3b,
	0x68, 0x3a, 0x52, 0x2e, 0xe9, 0x08, 0x6a, 0xf7, 0xa6, 0xbb, 0xfe, 0x4a, 0x83, 0xb9, 0xfe, 0x79,
	0xfc, 0x68, 0xb0, 0x37, 0xaa, 0xa3, 0x5b, 0x43, 0x90, 0x52, 0x75, 0xdb, 0x52, 0xdd, 0xba, 0xb5,
	0x3a, 0xd8, 0xc5, 0xa4, 0x97, 0xaf, 0x35, 0xf8, 0xa8, 0x68, 0xd2, 0xad, 0x15, 0x18, 0xd3, 0x4f,
	0x33, 0x76, 0x86, 0xa2, 0xdd, 0xaa, 0x0d, 0x99, 0xf3, 0x64, 0x6f, 0xd7, 0x76, 0x93, 0x8f, 0x12,
	0x6d, 0x3f, 0x69, 0xa0, 0x17, 0x0c, 0xa6, 0xd5, 0xfe, 0x9a, 0xfd, 0x2c, 0x63, 0x7b, 0x18, 0x56,
	0x2a, 0x6c, 0x47, 0x0a, 0xdb, 0xb0, 0xd6, 0x72, 0xc2, 0x1c, 0xf9, 0x89, 0x9d, 0xf3, 0xee, 0xe0,
	0xf9, 0xdb, 0x2b, 0x53, 0x7b, 0x77, 0x65, 0x6a, 0x7f, 0x5d, 0x99, 0xda, 0x8f, 0xd7, 0xe6, 0xc8,
	0xbb, 0x6b, 0x73, 0xe4, 0x8f, 0x6b, 0x73, 0xe4, 0xeb, 0x03, 0x2f, 0x10, 0x7e, 0xa7, 0x59, 0x75,
	0x68, 0xab, 0xf6, 0xa5, 0x4a, 0xb5, 0xa3, 0x46, 0x41, 0x7e, 0xd9, 0xa2, 0x6e, 0x27, 0xc4, 0xda,
	0xcb, 0x0f, 0x2b, 0x8a, 0xcb, 0x36, 0xf2, 0xe6, 0x98, 0xfc, 0xc7, 0xbf, 0xff, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x31, 0xa5, 0x31, 0x5f, 0x88, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the x/gravitynft module parameters.
	// The authority is defined in the keeper.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UnhaltNFTBridge defines a governance operation for unhalting the x/gravitynft module.
	UnhaltNFTBridge(ctx context.Context, in *MsgUnhaltNFTBridge, opts ...grpc.CallOption) (*MsgUnhaltNFTBridgeResponse, error)
	SendNFTToCosmosClaim(ctx context.Context, in *MsgSendNFTToCosmosClaim, opts ...grpc.CallOption) (*MsgSendNFTToCosmosClaimResponse, error)
	SendNFTToEth(ctx context.Context, in *MsgSendNFTToEth, opts ...grpc.CallOption) (*MsgSendNFTToEthResponse, error)
	ExecuteIbcNFTAutoForwards(ctx context.Context, in *MsgExecuteIbcNFTAutoForwards, opts ...grpc.CallOption) (*MsgExecuteIbcNFTAutoForwardsResponse, error)
	SendNFTToEthClaim(ctx context.Context, in *MsgSendNFTToEthClaim, opts ...grpc.CallOption) (*MsgSendNFTToEthClaimResponse, error)
	ERC721DeployedClaim(ctx context.Context, in *MsgERC721DeployedClaim, opts ...grpc.CallOption) (*MsgERC721DeployedClaimResponse, error)
	CancelSendNFTToEth(ctx context.Context, in *MsgCancelSendNFTToEth, opts ...grpc.CallOption) (*MsgCancelSendNFTToEthResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnhaltNFTBridge(ctx context.Context, in *MsgUnhaltNFTBridge, opts ...grpc.CallOption) (*MsgUnhaltNFTBridgeResponse, error) {
	out := new(MsgUnhaltNFTBridgeResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/UnhaltNFTBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendNFTToCosmosClaim(ctx context.Context, in *MsgSendNFTToCosmosClaim, opts ...grpc.CallOption) (*MsgSendNFTToCosmosClaimResponse, error) {
	out := new(MsgSendNFTToCosmosClaimResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/SendNFTToCosmosClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendNFTToEth(ctx context.Context, in *MsgSendNFTToEth, opts ...grpc.CallOption) (*MsgSendNFTToEthResponse, error) {
	out := new(MsgSendNFTToEthResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/SendNFTToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteIbcNFTAutoForwards(ctx context.Context, in *MsgExecuteIbcNFTAutoForwards, opts ...grpc.CallOption) (*MsgExecuteIbcNFTAutoForwardsResponse, error) {
	out := new(MsgExecuteIbcNFTAutoForwardsResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/ExecuteIbcNFTAutoForwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendNFTToEthClaim(ctx context.Context, in *MsgSendNFTToEthClaim, opts ...grpc.CallOption) (*MsgSendNFTToEthClaimResponse, error) {
	out := new(MsgSendNFTToEthClaimResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/SendNFTToEthClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ERC721DeployedClaim(ctx context.Context, in *MsgERC721DeployedClaim, opts ...grpc.CallOption) (*MsgERC721DeployedClaimResponse, error) {
	out := new(MsgERC721DeployedClaimResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/ERC721DeployedClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendNFTToEth(ctx context.Context, in *MsgCancelSendNFTToEth, opts ...grpc.CallOption) (*MsgCancelSendNFTToEthResponse, error) {
	out := new(MsgCancelSendNFTToEthResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/CancelSendNFTToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the x/gravitynft module parameters.
	// The authority is defined in the keeper.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UnhaltNFTBridge defines a governance operation for unhalting the x/gravitynft module.
	UnhaltNFTBridge(context.Context, *MsgUnhaltNFTBridge) (*MsgUnhaltNFTBridgeResponse, error)
	SendNFTToCosmosClaim(context.Context, *MsgSendNFTToCosmosClaim) (*MsgSendNFTToCosmosClaimResponse, error)
	SendNFTToEth(context.Context, *MsgSendNFTToEth) (*MsgSendNFTToEthResponse, error)
	ExecuteIbcNFTAutoForwards(context.Context, *MsgExecuteIbcNFTAutoForwards) (*MsgExecuteIbcNFTAutoForwardsResponse, error)
	SendNFTToEthClaim(context.Context, *MsgSendNFTToEthClaim) (*MsgSendNFTToEthClaimResponse, error)
	ERC721DeployedClaim(context.Context, *MsgERC721DeployedClaim) (*MsgERC721DeployedClaimResponse, error)
	CancelSendNFTToEth(context.Context, *MsgCancelSendNFTToEth) (*MsgCancelSendNFTToEthResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UnhaltNFTBridge(ctx context.Context, req *MsgUnhaltNFTBridge) (*MsgUnhaltNFTBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnhaltNFTBridge not implemented")
}
func (*UnimplementedMsgServer) SendNFTToCosmosClaim(ctx context.Context, req *MsgSendNFTToCosmosClaim) (*MsgSendNFTToCosmosClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNFTToCosmosClaim not implemented")
}
func (*UnimplementedMsgServer) SendNFTToEth(ctx context.Context, req *MsgSendNFTToEth) (*MsgSendNFTToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNFTToEth not implemented")
}
func (*UnimplementedMsgServer) ExecuteIbcNFTAutoForwards(ctx context.Context, req *MsgExecuteIbcNFTAutoForwards) (*MsgExecuteIbcNFTAutoForwardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteIbcNFTAutoForwards not implemented")
}
func (*UnimplementedMsgServer) SendNFTToEthClaim(ctx context.Context, req *MsgSendNFTToEthClaim) (*MsgSendNFTToEthClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNFTToEthClaim not implemented")
}
func (*UnimplementedMsgServer) ERC721DeployedClaim(ctx context.Context, req *MsgERC721DeployedClaim) (*MsgERC721DeployedClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC721DeployedClaim not implemented")
}
func (*UnimplementedMsgServer) CancelSendNFTToEth(ctx context.Context, req *MsgCancelSendNFTToEth) (*MsgCancelSendNFTToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendNFTToEth not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnhaltNFTBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnhaltNFTBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnhaltNFTBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/UnhaltNFTBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnhaltNFTBridge(ctx, req.(*MsgUnhaltNFTBridge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendNFTToCosmosClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendNFTToCosmosClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendNFTToCosmosClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/SendNFTToCosmosClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendNFTToCosmosClaim(ctx, req.(*MsgSendNFTToCosmosClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendNFTToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendNFTToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendNFTToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/SendNFTToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendNFTToEth(ctx, req.(*MsgSendNFTToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteIbcNFTAutoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteIbcNFTAutoForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteIbcNFTAutoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/ExecuteIbcNFTAutoForwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteIbcNFTAutoForwards(ctx, req.(*MsgExecuteIbcNFTAutoForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendNFTToEthClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendNFTToEthClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendNFTToEthClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/SendNFTToEthClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendNFTToEthClaim(ctx, req.(*MsgSendNFTToEthClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ERC721DeployedClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgERC721DeployedClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ERC721DeployedClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/ERC721DeployedClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ERC721DeployedClaim(ctx, req.(*MsgERC721DeployedClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendNFTToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendNFTToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendNFTToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/CancelSendNFTToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendNFTToEth(ctx, req.(*MsgCancelSendNFTToEth))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravitynft.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UnhaltNFTBridge",
			Handler:    _Msg_UnhaltNFTBridge_Handler,
		},
		{
			MethodName: "SendNFTToCosmosClaim",
			Handler:    _Msg_SendNFTToCosmosClaim_Handler,
		},
		{
			MethodName: "SendNFTToEth",
			Handler:    _Msg_SendNFTToEth_Handler,
		},
		{
			MethodName: "ExecuteIbcNFTAutoForwards",
			Handler:    _Msg_ExecuteIbcNFTAutoForwards_Handler,
		},
		{
			MethodName: "SendNFTToEthClaim",
			Handler:    _Msg_SendNFTToEthClaim_Handler,
		},
		{
			MethodName: "ERC721DeployedClaim",
			Handler:    _Msg_ERC721DeployedClaim_Handler,
		},
		{
			MethodName: "CancelSendNFTToEth",
			Handler:    _Msg_CancelSendNFTToEth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravitynft/v1/msgs.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnhaltNFTBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnhaltNFTBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnhaltNFTBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TargetNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnhaltNFTBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnhaltNFTBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnhaltNFTBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToCosmosClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToCosmosClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToCosmosClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToCosmosClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToCosmosClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToCosmosClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteIbcNFTAutoForwards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteIbcNFTAutoForwards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteIbcNFTAutoForwards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwardsToClear != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ForwardsToClear))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteIbcNFTAutoForwardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteIbcNFTAutoForwardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteIbcNFTAutoForwardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToEthClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToEthClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToEthClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToEthClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToEthClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToEthClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgERC721DeployedClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgERC721DeployedClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgERC721DeployedClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgERC721DeployedClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgERC721DeployedClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgERC721DeployedClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendNFTToEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendNFTToEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendNFTToEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendNFTToEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendNFTToEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendNFTToEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnhaltNFTBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.TargetNonce != 0 {
		n += 1 + sovMsgs(uint64(m.TargetNonce))
	}
	return n
}

func (m *MsgUnhaltNFTBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendNFTToCosmosClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendNFTToCosmosClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendNFTToEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendNFTToEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteIbcNFTAutoForwards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardsToClear != 0 {
		n += 1 + sovMsgs(uint64(m.ForwardsToClear))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgExecuteIbcNFTAutoForwardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendNFTToEthClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendNFTToEthClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgERC721DeployedClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgERC721DeployedClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSendNFTToEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCancelSendNFTToEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnhaltNFTBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnhaltNFTBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnhaltNFTBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNonce", wireType)
			}
			m.TargetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnhaltNFTBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnhaltNFTBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnhaltNFTBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToCosmosClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToCosmosClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteIbcNFTAutoForwards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteIbcNFTAutoForwards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteIbcNFTAutoForwards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardsToClear", wireType)
			}
			m.ForwardsToClear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardsToClear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteIbcNFTAutoForwardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteIbcNFTAutoForwardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteIbcNFTAutoForwardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToEthClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToEthClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToEthClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToEthClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToEthClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToEthClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgERC721DeployedClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgERC721DeployedClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgERC721DeployedClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgERC721DeployedClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgERC721DeployedClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgERC721DeployedClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendNFTToEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendNFTToEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendNFTToEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendNFTToEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendNFTToEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendNFTToEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
