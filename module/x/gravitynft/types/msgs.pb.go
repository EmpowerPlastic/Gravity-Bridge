// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSendNFTToCosmosClaim
// When more than 66% of the active validator set has
// claimed to have seen the NFT deposit enter the ethereum blockchain NFT is minted and
// issued to the Cosmos address in question
// -------------
type MsgSendNFTToCosmosClaim struct {
	EventNonce     uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight uint64 `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	TokenContract  string `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	TokenId        string `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenUri       string `protobuf:"bytes,5,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	EthereumSender string `protobuf:"bytes,6,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	CosmosReceiver string `protobuf:"bytes,7,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	Orchestrator   string `protobuf:"bytes,8,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSendNFTToCosmosClaim) Reset()         { *m = MsgSendNFTToCosmosClaim{} }
func (m *MsgSendNFTToCosmosClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToCosmosClaim) ProtoMessage()    {}
func (*MsgSendNFTToCosmosClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{0}
}
func (m *MsgSendNFTToCosmosClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToCosmosClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToCosmosClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToCosmosClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToCosmosClaim.Merge(m, src)
}
func (m *MsgSendNFTToCosmosClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToCosmosClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToCosmosClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToCosmosClaim proto.InternalMessageInfo

func (m *MsgSendNFTToCosmosClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendNFTToCosmosClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgSendNFTToCosmosClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *MsgSendNFTToCosmosClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSendNFTToCosmosClaimResponse struct {
}

func (m *MsgSendNFTToCosmosClaimResponse) Reset()         { *m = MsgSendNFTToCosmosClaimResponse{} }
func (m *MsgSendNFTToCosmosClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendNFTToCosmosClaimResponse) ProtoMessage()    {}
func (*MsgSendNFTToCosmosClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2f46fa3ae18d, []int{1}
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendNFTToCosmosClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendNFTToCosmosClaimResponse.Merge(m, src)
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendNFTToCosmosClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendNFTToCosmosClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendNFTToCosmosClaimResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSendNFTToCosmosClaim)(nil), "gravitynft.v1.MsgSendNFTToCosmosClaim")
	proto.RegisterType((*MsgSendNFTToCosmosClaimResponse)(nil), "gravitynft.v1.MsgSendNFTToCosmosClaimResponse")
}

func init() { proto.RegisterFile("gravitynft/v1/msgs.proto", fileDescriptor_15bd2f46fa3ae18d) }

var fileDescriptor_15bd2f46fa3ae18d = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x6a, 0x14, 0x41,
	0x10, 0xc7, 0x33, 0x9b, 0x98, 0x8f, 0xd6, 0xac, 0xd2, 0x08, 0xb6, 0x51, 0x26, 0x71, 0x40, 0xb3,
	0x1e, 0x9c, 0x21, 0xfa, 0x06, 0xbb, 0xe0, 0xc7, 0x21, 0x39, 0x6c, 0xe2, 0x45, 0x84, 0x66, 0xb6,
	0xa7, 0xd2, 0xd3, 0x64, 0xa7, 0x6b, 0xe9, 0xae, 0x1d, 0xcc, 0xd5, 0x27, 0x10, 0x7c, 0x00, 0x8f,
	0x3e, 0x83, 0x6f, 0xe0, 0x31, 0xe0, 0xc5, 0xa3, 0xec, 0xfa, 0x20, 0x32, 0x3d, 0x1b, 0x74, 0xc5,
	0x80, 0xc7, 0xfa, 0xd5, 0x6f, 0xaa, 0x98, 0x7f, 0x17, 0x13, 0xda, 0xe5, 0xb5, 0xa1, 0x73, 0x7b,
	0x4a, 0x59, 0x7d, 0x90, 0x55, 0x5e, 0xfb, 0x74, 0xe2, 0x90, 0x90, 0x6f, 0xff, 0xee, 0xa4, 0xf5,
	0xc1, 0xce, 0x7d, 0x8d, 0xa8, 0xc7, 0x90, 0xe5, 0x13, 0x93, 0xe5, 0xd6, 0x22, 0xe5, 0x64, 0xd0,
	0x2e, 0xe4, 0xe4, 0x4b, 0x87, 0xdd, 0x39, 0xf4, 0xfa, 0x18, 0x6c, 0x71, 0xf4, 0xfc, 0xe4, 0x04,
	0x07, 0xe8, 0x2b, 0xf4, 0x83, 0x71, 0x6e, 0x2a, 0xbe, 0xcb, 0xae, 0x43, 0x0d, 0x96, 0xa4, 0x45,
	0xab, 0x40, 0x44, 0x7b, 0x51, 0x6f, 0x6d, 0xc8, 0x02, 0x3a, 0x6a, 0x08, 0xef, 0xb1, 0x5b, 0x40,
	0xa5, 0x1c, 0x8d, 0x51, 0x9d, 0xc9, 0x12, 0x8c, 0x2e, 0x49, 0x74, 0x82, 0xd5, 0x05, 0x2a, 0xfb,
	0x0d, 0x7e, 0x19, 0x28, 0x7f, 0xc8, 0xba, 0x84, 0x67, 0x60, 0xa5, 0x42, 0x4b, 0x2e, 0x57, 0x24,
	0x56, 0xf7, 0xa2, 0xde, 0xd6, 0x70, 0x3b, 0xd0, 0xc1, 0x02, 0xf2, 0xbb, 0x6c, 0xb3, 0xd5, 0x4c,
	0x21, 0xd6, 0x82, 0xb0, 0x11, 0xea, 0x57, 0x05, 0xbf, 0xc7, 0xb6, 0xda, 0xd6, 0xd4, 0x19, 0x71,
	0x2d, 0xf4, 0x5a, 0xf7, 0xb5, 0x33, 0x7c, 0x9f, 0xdd, 0x04, 0x2a, 0xc1, 0xc1, 0xb4, 0x92, 0x1e,
	0x6c, 0x01, 0x4e, 0xac, 0x07, 0xa5, 0x7b, 0x89, 0x8f, 0x03, 0x6d, 0x44, 0x15, 0xfe, 0x50, 0x3a,
	0x50, 0x60, 0x6a, 0x70, 0x62, 0xa3, 0x15, 0x5b, 0x3c, 0x5c, 0x50, 0x9e, 0xb0, 0x1b, 0xe8, 0x54,
	0x09, 0x9e, 0x5c, 0x4e, 0xe8, 0xc4, 0x66, 0xb0, 0x96, 0x58, 0xf2, 0x80, 0xed, 0x5e, 0x11, 0xdd,
	0x10, 0xfc, 0x04, 0xad, 0x87, 0xa7, 0x9f, 0x23, 0xb6, 0x7a, 0xe8, 0x35, 0xff, 0x14, 0xb1, 0xdb,
	0xff, 0xcc, 0xf8, 0x51, 0xba, 0xf4, 0x5a, 0xe9, 0x15, 0x03, 0x77, 0xd2, 0xff, 0xf3, 0x2e, 0x17,
	0x27, 0xd9, 0xfb, 0x6f, 0x3f, 0x3f, 0x76, 0x1e, 0x27, 0xfb, 0xd9, 0xf2, 0x9d, 0x34, 0xe9, 0x48,
	0x7b, 0x4a, 0x92, 0x50, 0x2e, 0x92, 0x50, 0xcd, 0x87, 0xfd, 0xb7, 0x5f, 0x67, 0x71, 0x74, 0x31,
	0x8b, 0xa3, 0x1f, 0xb3, 0x38, 0xfa, 0x30, 0x8f, 0x57, 0x2e, 0xe6, 0xf1, 0xca, 0xf7, 0x79, 0xbc,
	0xf2, 0xa6, 0xaf, 0x0d, 0x95, 0xd3, 0x51, 0xaa, 0xb0, 0xca, 0x5e, 0xb4, 0xc3, 0x9e, 0xf4, 0x9d,
	0x29, 0x34, 0xfc, 0x5d, 0x56, 0x58, 0x4c, 0xc7, 0x90, 0xbd, 0xfb, 0x73, 0x27, 0x9d, 0x4f, 0xc0,
	0x8f, 0xd6, 0xc3, 0xb5, 0x3d, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xce, 0x06, 0x18, 0xb6,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendNFTToCosmosClaim(ctx context.Context, in *MsgSendNFTToCosmosClaim, opts ...grpc.CallOption) (*MsgSendNFTToCosmosClaimResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendNFTToCosmosClaim(ctx context.Context, in *MsgSendNFTToCosmosClaim, opts ...grpc.CallOption) (*MsgSendNFTToCosmosClaimResponse, error) {
	out := new(MsgSendNFTToCosmosClaimResponse)
	err := c.cc.Invoke(ctx, "/gravitynft.v1.Msg/SendNFTToCosmosClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendNFTToCosmosClaim(context.Context, *MsgSendNFTToCosmosClaim) (*MsgSendNFTToCosmosClaimResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendNFTToCosmosClaim(ctx context.Context, req *MsgSendNFTToCosmosClaim) (*MsgSendNFTToCosmosClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNFTToCosmosClaim not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendNFTToCosmosClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendNFTToCosmosClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendNFTToCosmosClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravitynft.v1.Msg/SendNFTToCosmosClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendNFTToCosmosClaim(ctx, req.(*MsgSendNFTToCosmosClaim))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravitynft.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNFTToCosmosClaim",
			Handler:    _Msg_SendNFTToCosmosClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravitynft/v1/msgs.proto",
}

func (m *MsgSendNFTToCosmosClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToCosmosClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToCosmosClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendNFTToCosmosClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendNFTToCosmosClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendNFTToCosmosClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendNFTToCosmosClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendNFTToCosmosClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendNFTToCosmosClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendNFTToCosmosClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendNFTToCosmosClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
