// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	GravityId                 string `protobuf:"bytes,1,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	ContractSourceHash        string `protobuf:"bytes,2,opt,name=contract_source_hash,json=contractSourceHash,proto3" json:"contract_source_hash,omitempty"`
	BridgeEthereumAddress     string `protobuf:"bytes,4,opt,name=bridge_ethereum_address,json=bridgeEthereumAddress,proto3" json:"bridge_ethereum_address,omitempty"`
	BridgeChainId             uint64 `protobuf:"varint,5,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	SignedSendNftToEthWindow  uint64 `protobuf:"varint,6,opt,name=signed_send_nft_to_eth_window,json=signedSendNftToEthWindow,proto3" json:"signed_send_nft_to_eth_window,omitempty"`
	TargetSendNftToEthTimeout uint64 `protobuf:"varint,7,opt,name=target_send_nft_to_eth_timeout,json=targetSendNftToEthTimeout,proto3" json:"target_send_nft_to_eth_timeout,omitempty"`
	AverageBlockTime          uint64 `protobuf:"varint,8,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	AverageEthereumBlockTime  uint64 `protobuf:"varint,9,opt,name=average_ethereum_block_time,json=averageEthereumBlockTime,proto3" json:"average_ethereum_block_time,omitempty"`
	BridgeActive              bool   `protobuf:"varint,10,opt,name=bridge_active,json=bridgeActive,proto3" json:"bridge_active,omitempty"`
	// addresses on this blacklist are forbidden from depositing or withdrawing
	// from Ethereum to the bridge
	EthereumBlacklist []string `protobuf:"bytes,11,rep,name=ethereum_blacklist,json=ethereumBlacklist,proto3" json:"ethereum_blacklist,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_11b51c1c82897418, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetGravityId() string {
	if m != nil {
		return m.GravityId
	}
	return ""
}

func (m *Params) GetContractSourceHash() string {
	if m != nil {
		return m.ContractSourceHash
	}
	return ""
}

func (m *Params) GetBridgeEthereumAddress() string {
	if m != nil {
		return m.BridgeEthereumAddress
	}
	return ""
}

func (m *Params) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *Params) GetSignedSendNftToEthWindow() uint64 {
	if m != nil {
		return m.SignedSendNftToEthWindow
	}
	return 0
}

func (m *Params) GetTargetSendNftToEthTimeout() uint64 {
	if m != nil {
		return m.TargetSendNftToEthTimeout
	}
	return 0
}

func (m *Params) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *Params) GetAverageEthereumBlockTime() uint64 {
	if m != nil {
		return m.AverageEthereumBlockTime
	}
	return 0
}

func (m *Params) GetBridgeActive() bool {
	if m != nil {
		return m.BridgeActive
	}
	return false
}

func (m *Params) GetEthereumBlacklist() []string {
	if m != nil {
		return m.EthereumBlacklist
	}
	return nil
}

type GenesisState struct {
	Params                    *Params                    `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	GravityNonces             GravityNonces              `protobuf:"bytes,2,opt,name=gravity_nonces,json=gravityNonces,proto3" json:"gravity_nonces"`
	OutgoingNfts              []OutgoingNFT              `protobuf:"bytes,3,rep,name=outgoing_nfts,json=outgoingNfts,proto3" json:"outgoing_nfts"`
	NftAttestations           []NFTAttestation           `protobuf:"bytes,4,rep,name=nft_attestations,json=nftAttestations,proto3" json:"nft_attestations"`
	Erc721ToClassids          []ERC721ToClassId          `protobuf:"bytes,5,rep,name=erc721_to_classids,json=erc721ToClassids,proto3" json:"erc721_to_classids"`
	PendingNftIbcAutoForwards []PendingNFTIbcAutoForward `protobuf:"bytes,6,rep,name=pending_nft_ibc_auto_forwards,json=pendingNftIbcAutoForwards,proto3" json:"pending_nft_ibc_auto_forwards"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_11b51c1c82897418, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetGravityNonces() GravityNonces {
	if m != nil {
		return m.GravityNonces
	}
	return GravityNonces{}
}

func (m *GenesisState) GetOutgoingNfts() []OutgoingNFT {
	if m != nil {
		return m.OutgoingNfts
	}
	return nil
}

func (m *GenesisState) GetNftAttestations() []NFTAttestation {
	if m != nil {
		return m.NftAttestations
	}
	return nil
}

func (m *GenesisState) GetErc721ToClassids() []ERC721ToClassId {
	if m != nil {
		return m.Erc721ToClassids
	}
	return nil
}

func (m *GenesisState) GetPendingNftIbcAutoForwards() []PendingNFTIbcAutoForward {
	if m != nil {
		return m.PendingNftIbcAutoForwards
	}
	return nil
}

type GravityNonces struct {
	// the last observed GravityERC721.sol contract event nonce
	LastObservedNftNonce uint64 `protobuf:"varint,2,opt,name=last_observed_nft_nonce,json=lastObservedNftNonce,proto3" json:"last_observed_nft_nonce,omitempty"`
	// the last block that NFT send to Eth slashing has completed for
	LastSlashedSendNftToEthBlock uint64 `protobuf:"varint,3,opt,name=last_slashed_send_nft_to_eth_block,json=lastSlashedSendNftToEthBlock,proto3" json:"last_slashed_send_nft_to_eth_block,omitempty"`
}

func (m *GravityNonces) Reset()         { *m = GravityNonces{} }
func (m *GravityNonces) String() string { return proto.CompactTextString(m) }
func (*GravityNonces) ProtoMessage()    {}
func (*GravityNonces) Descriptor() ([]byte, []int) {
	return fileDescriptor_11b51c1c82897418, []int{2}
}
func (m *GravityNonces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GravityNonces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GravityNonces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GravityNonces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GravityNonces.Merge(m, src)
}
func (m *GravityNonces) XXX_Size() int {
	return m.Size()
}
func (m *GravityNonces) XXX_DiscardUnknown() {
	xxx_messageInfo_GravityNonces.DiscardUnknown(m)
}

var xxx_messageInfo_GravityNonces proto.InternalMessageInfo

func (m *GravityNonces) GetLastObservedNftNonce() uint64 {
	if m != nil {
		return m.LastObservedNftNonce
	}
	return 0
}

func (m *GravityNonces) GetLastSlashedSendNftToEthBlock() uint64 {
	if m != nil {
		return m.LastSlashedSendNftToEthBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "gravitynft.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "gravitynft.v1.GenesisState")
	proto.RegisterType((*GravityNonces)(nil), "gravitynft.v1.GravityNonces")
}

func init() { proto.RegisterFile("gravitynft/v1/genesis.proto", fileDescriptor_11b51c1c82897418) }

var fileDescriptor_11b51c1c82897418 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x4f, 0x6f, 0xe2, 0x46,
	0x18, 0xc6, 0x71, 0x61, 0xe9, 0x32, 0x84, 0x6e, 0x3a, 0xca, 0x2a, 0x4e, 0x76, 0xf1, 0x22, 0x2a,
	0xb5, 0x1c, 0xba, 0x50, 0xa8, 0xda, 0x95, 0x2a, 0x55, 0x15, 0x44, 0xb0, 0xcb, 0xc5, 0x5b, 0x19,
	0xa4, 0x4a, 0x55, 0x25, 0x6b, 0xf0, 0x8c, 0xed, 0xd1, 0x82, 0x07, 0x79, 0x5e, 0x93, 0xe6, 0xd6,
	0x43, 0x3f, 0x40, 0x3e, 0x56, 0x8e, 0x39, 0xf6, 0x50, 0x55, 0x55, 0xd2, 0x0f, 0x52, 0xcd, 0x1f,
	0x12, 0xa0, 0xbd, 0xe1, 0xf7, 0x79, 0x9e, 0x9f, 0xcd, 0xcc, 0x33, 0x83, 0x5e, 0x24, 0x39, 0xd9,
	0x70, 0xb8, 0xca, 0x62, 0xe8, 0x6d, 0xfa, 0xbd, 0x84, 0x65, 0x4c, 0x72, 0xd9, 0x5d, 0xe7, 0x02,
	0x04, 0x6e, 0x3c, 0x8a, 0xdd, 0x4d, 0xff, 0xfc, 0x24, 0x11, 0x89, 0xd0, 0x4a, 0x4f, 0xfd, 0x32,
	0xa6, 0xf3, 0x57, 0xfb, 0x04, 0x02, 0xc0, 0x24, 0x10, 0xe0, 0x22, 0xb3, 0x86, 0xd3, 0x7d, 0x83,
	0x82, 0x19, 0xe1, 0x6c, 0x5f, 0x80, 0xab, 0x35, 0xb3, 0x6f, 0x6e, 0xff, 0x5e, 0x41, 0xd5, 0x1f,
	0x49, 0x4e, 0x56, 0x12, 0x37, 0x11, 0xb2, 0xbe, 0x90, 0x53, 0xd7, 0x69, 0x39, 0x9d, 0x5a, 0x50,
	0xb3, 0x93, 0x29, 0xc5, 0x5f, 0xa1, 0x93, 0x48, 0x64, 0x90, 0x93, 0x08, 0x42, 0x29, 0x8a, 0x3c,
	0x62, 0x61, 0x4a, 0x64, 0xea, 0x7e, 0xa4, 0x8d, 0x78, 0xab, 0xcd, 0xb4, 0xf4, 0x8e, 0xc8, 0x14,
	0x7f, 0x8b, 0x4e, 0x17, 0x39, 0xa7, 0x09, 0x0b, 0x19, 0xa4, 0x2c, 0x67, 0xc5, 0x2a, 0x24, 0x94,
	0xe6, 0x4c, 0x4a, 0xb7, 0xa2, 0x43, 0xcf, 0x8d, 0x3c, 0xb6, 0xea, 0xd0, 0x88, 0xf8, 0x73, 0xf4,
	0xcc, 0xe6, 0xa2, 0x94, 0xf0, 0x4c, 0x7d, 0xcd, 0x93, 0x96, 0xd3, 0xa9, 0x04, 0x0d, 0x33, 0xbe,
	0x50, 0xd3, 0x29, 0xc5, 0x3f, 0xa0, 0xa6, 0xe4, 0x49, 0xc6, 0x68, 0x28, 0x59, 0x46, 0xc3, 0x2c,
	0x86, 0x10, 0x84, 0x7a, 0x57, 0x78, 0xc9, 0x33, 0x2a, 0x2e, 0xdd, 0xaa, 0x4e, 0xb9, 0xc6, 0x34,
	0x63, 0x19, 0xf5, 0x63, 0x98, 0x8b, 0x31, 0xa4, 0x3f, 0x69, 0x1d, 0x0f, 0x91, 0x07, 0x24, 0x4f,
	0x18, 0xfc, 0x07, 0x00, 0x7c, 0xc5, 0x44, 0x01, 0xee, 0xc7, 0x9a, 0x70, 0x66, 0x5c, 0xbb, 0x84,
	0xb9, 0x31, 0xe0, 0x2f, 0x11, 0x26, 0x1b, 0x96, 0x93, 0x84, 0x85, 0x8b, 0xa5, 0x88, 0x3e, 0xe8,
	0xa4, 0xfb, 0x54, 0xc7, 0x8e, 0xad, 0x32, 0x52, 0x82, 0x0a, 0xe0, 0xef, 0xd1, 0x8b, 0xad, 0xfb,
	0x61, 0x49, 0x76, 0x62, 0x35, 0xf3, 0xbd, 0xd6, 0xb2, 0x5d, 0x96, 0xc7, 0xf8, 0x67, 0xc8, 0xae,
	0x40, 0x48, 0x22, 0xe0, 0x1b, 0xe6, 0xa2, 0x96, 0xd3, 0x79, 0x1a, 0x1c, 0x99, 0xe1, 0x50, 0xcf,
	0xf0, 0x6b, 0x84, 0x77, 0xd8, 0x24, 0xfa, 0xb0, 0xe4, 0x12, 0xdc, 0x7a, 0xab, 0xdc, 0xa9, 0x05,
	0x9f, 0xb2, 0x07, 0xa6, 0x15, 0xbe, 0xab, 0xfc, 0xf6, 0x67, 0xab, 0xd4, 0xfe, 0xa7, 0x8c, 0x8e,
	0xde, 0x9a, 0x4a, 0xce, 0x80, 0x80, 0xa2, 0x54, 0xd7, 0xba, 0x16, 0xba, 0x08, 0xf5, 0xc1, 0xf3,
	0xee, 0x5e, 0x45, 0xbb, 0xa6, 0x33, 0x81, 0x35, 0xe1, 0x29, 0xfa, 0x64, 0xdb, 0x9d, 0x4c, 0x64,
	0x11, 0x93, 0xba, 0x16, 0xf5, 0xc1, 0xcb, 0x83, 0xd8, 0x5b, 0xf3, 0xe4, 0x6b, 0xcf, 0xa8, 0x72,
	0xf3, 0xd7, 0xab, 0x52, 0xb0, 0x2d, 0xbf, 0x19, 0xe2, 0x31, 0x6a, 0x88, 0x02, 0x12, 0xc1, 0xb3,
	0x44, 0xed, 0x88, 0x74, 0xcb, 0xad, 0x72, 0xa7, 0x3e, 0x38, 0x3f, 0x20, 0xbd, 0xb7, 0x1e, 0x7f,
	0x32, 0xb7, 0x9c, 0xa3, 0x6d, 0xcc, 0x8f, 0x41, 0x62, 0x1f, 0x1d, 0xab, 0xfd, 0xdc, 0x39, 0x25,
	0xaa, 0x75, 0x8a, 0xd4, 0x3c, 0x20, 0xf9, 0x93, 0xf9, 0xf0, 0xd1, 0x65, 0x61, 0xcf, 0xb2, 0x18,
	0x76, 0xa6, 0x12, 0x07, 0x08, 0xb3, 0x3c, 0x7a, 0x33, 0xe8, 0xab, 0x8a, 0x44, 0x4b, 0x22, 0x25,
	0xa7, 0xd2, 0x7d, 0xa2, 0x89, 0xde, 0x01, 0x71, 0x1c, 0x5c, 0xbc, 0x19, 0xf4, 0xe7, 0xe2, 0x42,
	0xd9, 0xa6, 0xd4, 0x22, 0x8f, 0x4d, 0xde, 0x8e, 0x39, 0x95, 0x58, 0xa0, 0xe6, 0x9a, 0x65, 0xd4,
	0xfe, 0xd3, 0x90, 0x2f, 0xa2, 0x90, 0x14, 0x20, 0xc2, 0x58, 0xe4, 0x97, 0x24, 0xa7, 0xd2, 0xad,
	0x6a, 0xfc, 0x17, 0x87, 0x6b, 0x6f, 0x32, 0xfe, 0x64, 0x3e, 0x5d, 0x44, 0xc3, 0x02, 0xc4, 0xc4,
	0xf8, 0xed, 0x7b, 0xce, 0x2c, 0xd3, 0x8f, 0x61, 0x5f, 0x97, 0xed, 0x6b, 0x07, 0x35, 0xf6, 0xb6,
	0x00, 0x7f, 0x83, 0x4e, 0x97, 0x44, 0x42, 0x28, 0x16, 0x92, 0xe5, 0x1b, 0x66, 0x0e, 0x81, 0xde,
	0x42, 0xbd, 0x83, 0x95, 0xe0, 0x44, 0xc9, 0xef, 0xad, 0xea, 0xc7, 0xa0, 0x73, 0xf8, 0x1d, 0x6a,
	0xeb, 0x98, 0x5c, 0x12, 0x99, 0xfe, 0xcf, 0x01, 0xd4, 0xa5, 0x76, 0xcb, 0x9a, 0xf0, 0x52, 0x39,
	0x67, 0xc6, 0xb8, 0x7b, 0x84, 0x74, 0xaf, 0x47, 0xbf, 0xdc, 0xdc, 0x79, 0xce, 0xed, 0x9d, 0xe7,
	0xfc, 0x7d, 0xe7, 0x39, 0xd7, 0xf7, 0x5e, 0xe9, 0xf6, 0xde, 0x2b, 0xfd, 0x71, 0xef, 0x95, 0x7e,
	0x1e, 0x25, 0x1c, 0xd2, 0x62, 0xd1, 0x8d, 0xc4, 0xaa, 0x67, 0x3f, 0xfa, 0xf5, 0x48, 0x37, 0xfd,
	0xf0, 0x71, 0x25, 0x68, 0xb1, 0x64, 0xbd, 0x5f, 0x7b, 0x3b, 0xf7, 0x9c, 0xbe, 0xe4, 0x16, 0x55,
	0x7d, 0xcb, 0x7d, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0xe9, 0x0a, 0xa1, 0x7e, 0x05,
	0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthereumBlacklist) > 0 {
		for iNdEx := len(m.EthereumBlacklist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EthereumBlacklist[iNdEx])
			copy(dAtA[i:], m.EthereumBlacklist[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.EthereumBlacklist[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.BridgeActive {
		i--
		if m.BridgeActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.AverageEthereumBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageEthereumBlockTime))
		i--
		dAtA[i] = 0x48
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x40
	}
	if m.TargetSendNftToEthTimeout != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TargetSendNftToEthTimeout))
		i--
		dAtA[i] = 0x38
	}
	if m.SignedSendNftToEthWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedSendNftToEthWindow))
		i--
		dAtA[i] = 0x30
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BridgeEthereumAddress) > 0 {
		i -= len(m.BridgeEthereumAddress)
		copy(dAtA[i:], m.BridgeEthereumAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BridgeEthereumAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractSourceHash) > 0 {
		i -= len(m.ContractSourceHash)
		copy(dAtA[i:], m.ContractSourceHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ContractSourceHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GravityId) > 0 {
		i -= len(m.GravityId)
		copy(dAtA[i:], m.GravityId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GravityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingNftIbcAutoForwards) > 0 {
		for iNdEx := len(m.PendingNftIbcAutoForwards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingNftIbcAutoForwards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Erc721ToClassids) > 0 {
		for iNdEx := len(m.Erc721ToClassids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc721ToClassids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NftAttestations) > 0 {
		for iNdEx := len(m.NftAttestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftAttestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.OutgoingNfts) > 0 {
		for iNdEx := len(m.OutgoingNfts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutgoingNfts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.GravityNonces.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GravityNonces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GravityNonces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GravityNonces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSlashedSendNftToEthBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedSendNftToEthBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.LastObservedNftNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedNftNonce))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GravityId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ContractSourceHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.BridgeEthereumAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovGenesis(uint64(m.BridgeChainId))
	}
	if m.SignedSendNftToEthWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedSendNftToEthWindow))
	}
	if m.TargetSendNftToEthTimeout != 0 {
		n += 1 + sovGenesis(uint64(m.TargetSendNftToEthTimeout))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageBlockTime))
	}
	if m.AverageEthereumBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageEthereumBlockTime))
	}
	if m.BridgeActive {
		n += 2
	}
	if len(m.EthereumBlacklist) > 0 {
		for _, s := range m.EthereumBlacklist {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.GravityNonces.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.OutgoingNfts) > 0 {
		for _, e := range m.OutgoingNfts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NftAttestations) > 0 {
		for _, e := range m.NftAttestations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc721ToClassids) > 0 {
		for _, e := range m.Erc721ToClassids {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PendingNftIbcAutoForwards) > 0 {
		for _, e := range m.PendingNftIbcAutoForwards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GravityNonces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObservedNftNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedNftNonce))
	}
	if m.LastSlashedSendNftToEthBlock != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedSendNftToEthBlock))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeEthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeEthereumAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedSendNftToEthWindow", wireType)
			}
			m.SignedSendNftToEthWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedSendNftToEthWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSendNftToEthTimeout", wireType)
			}
			m.TargetSendNftToEthTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetSendNftToEthTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEthereumBlockTime", wireType)
			}
			m.AverageEthereumBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageEthereumBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeActive = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumBlacklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumBlacklist = append(m.EthereumBlacklist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GravityNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingNfts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingNfts = append(m.OutgoingNfts, OutgoingNFT{})
			if err := m.OutgoingNfts[len(m.OutgoingNfts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAttestations = append(m.NftAttestations, NFTAttestation{})
			if err := m.NftAttestations[len(m.NftAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc721ToClassids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc721ToClassids = append(m.Erc721ToClassids, ERC721ToClassId{})
			if err := m.Erc721ToClassids[len(m.Erc721ToClassids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNftIbcAutoForwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingNftIbcAutoForwards = append(m.PendingNftIbcAutoForwards, PendingNFTIbcAutoForward{})
			if err := m.PendingNftIbcAutoForwards[len(m.PendingNftIbcAutoForwards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GravityNonces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GravityNonces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GravityNonces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNftNonce", wireType)
			}
			m.LastObservedNftNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNftNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedSendNftToEthBlock", wireType)
			}
			m.LastSlashedSendNftToEthBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedSendNftToEthBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
