// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LastObservedNFTEthereumBlockHeight stores the last observed
// Ethereum block height along with the Cosmos block height that
// it was observed at. These two numbers can be used to project
// outward and always produce batches with timeouts in the future
// even if no Ethereum block height has been relayed for a long time
type LastObservedNFTEthereumBlockHeight struct {
	CosmosBlockHeight   uint64 `protobuf:"varint,1,opt,name=cosmos_block_height,json=cosmosBlockHeight,proto3" json:"cosmos_block_height,omitempty"`
	EthereumBlockHeight uint64 `protobuf:"varint,2,opt,name=ethereum_block_height,json=ethereumBlockHeight,proto3" json:"ethereum_block_height,omitempty"`
}

func (m *LastObservedNFTEthereumBlockHeight) Reset()         { *m = LastObservedNFTEthereumBlockHeight{} }
func (m *LastObservedNFTEthereumBlockHeight) String() string { return proto.CompactTextString(m) }
func (*LastObservedNFTEthereumBlockHeight) ProtoMessage()    {}
func (*LastObservedNFTEthereumBlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c6f9c9e4250776, []int{0}
}
func (m *LastObservedNFTEthereumBlockHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastObservedNFTEthereumBlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastObservedNFTEthereumBlockHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastObservedNFTEthereumBlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastObservedNFTEthereumBlockHeight.Merge(m, src)
}
func (m *LastObservedNFTEthereumBlockHeight) XXX_Size() int {
	return m.Size()
}
func (m *LastObservedNFTEthereumBlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_LastObservedNFTEthereumBlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_LastObservedNFTEthereumBlockHeight proto.InternalMessageInfo

func (m *LastObservedNFTEthereumBlockHeight) GetCosmosBlockHeight() uint64 {
	if m != nil {
		return m.CosmosBlockHeight
	}
	return 0
}

func (m *LastObservedNFTEthereumBlockHeight) GetEthereumBlockHeight() uint64 {
	if m != nil {
		return m.EthereumBlockHeight
	}
	return 0
}

// This records the relationship between an ERC721 token and the class id
// of the corresponding Cosmos originated asset
type ERC721ToClassId struct {
	Erc721  string `protobuf:"bytes,1,opt,name=erc721,proto3" json:"erc721,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *ERC721ToClassId) Reset()         { *m = ERC721ToClassId{} }
func (m *ERC721ToClassId) String() string { return proto.CompactTextString(m) }
func (*ERC721ToClassId) ProtoMessage()    {}
func (*ERC721ToClassId) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c6f9c9e4250776, []int{1}
}
func (m *ERC721ToClassId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC721ToClassId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC721ToClassId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC721ToClassId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC721ToClassId.Merge(m, src)
}
func (m *ERC721ToClassId) XXX_Size() int {
	return m.Size()
}
func (m *ERC721ToClassId) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC721ToClassId.DiscardUnknown(m)
}

var xxx_messageInfo_ERC721ToClassId proto.InternalMessageInfo

func (m *ERC721ToClassId) GetErc721() string {
	if m != nil {
		return m.Erc721
	}
	return ""
}

func (m *ERC721ToClassId) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

// UnhaltBridgeProposal defines a custom governance proposal useful for restoring
// the bridge after a oracle disagreement. Once this proposal is passed bridge state will roll back events
// to the nonce provided in target_nonce if and only if those events have not yet been observed (executed on the Cosmos chain). This allows for easy
// handling of cases where for example an Ethereum hardfork has occured and more than 1/3 of the vlaidtor set
// disagrees with the rest. Normally this would require a chain halt, manual genesis editing and restar to resolve
// with this feature a governance proposal can be used instead
type UnhaltBridgeProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TargetNonce uint64 `protobuf:"varint,4,opt,name=target_nonce,json=targetNonce,proto3" json:"target_nonce,omitempty"`
}

func (m *UnhaltBridgeProposal) Reset()      { *m = UnhaltBridgeProposal{} }
func (*UnhaltBridgeProposal) ProtoMessage() {}
func (*UnhaltBridgeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c6f9c9e4250776, []int{2}
}
func (m *UnhaltBridgeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnhaltBridgeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnhaltBridgeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnhaltBridgeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnhaltBridgeProposal.Merge(m, src)
}
func (m *UnhaltBridgeProposal) XXX_Size() int {
	return m.Size()
}
func (m *UnhaltBridgeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UnhaltBridgeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UnhaltBridgeProposal proto.InternalMessageInfo

type PendingNFTIbcAutoForward struct {
	ForeignReceiver string `protobuf:"bytes,1,opt,name=foreign_receiver,json=foreignReceiver,proto3" json:"foreign_receiver,omitempty"`
	ClassId         string `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TokenId         string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	IbcChannel      string `protobuf:"bytes,4,opt,name=ibc_channel,json=ibcChannel,proto3" json:"ibc_channel,omitempty"`
	EventNonce      uint64 `protobuf:"varint,5,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *PendingNFTIbcAutoForward) Reset()         { *m = PendingNFTIbcAutoForward{} }
func (m *PendingNFTIbcAutoForward) String() string { return proto.CompactTextString(m) }
func (*PendingNFTIbcAutoForward) ProtoMessage()    {}
func (*PendingNFTIbcAutoForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_94c6f9c9e4250776, []int{3}
}
func (m *PendingNFTIbcAutoForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingNFTIbcAutoForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingNFTIbcAutoForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingNFTIbcAutoForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingNFTIbcAutoForward.Merge(m, src)
}
func (m *PendingNFTIbcAutoForward) XXX_Size() int {
	return m.Size()
}
func (m *PendingNFTIbcAutoForward) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingNFTIbcAutoForward.DiscardUnknown(m)
}

var xxx_messageInfo_PendingNFTIbcAutoForward proto.InternalMessageInfo

func (m *PendingNFTIbcAutoForward) GetForeignReceiver() string {
	if m != nil {
		return m.ForeignReceiver
	}
	return ""
}

func (m *PendingNFTIbcAutoForward) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *PendingNFTIbcAutoForward) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *PendingNFTIbcAutoForward) GetIbcChannel() string {
	if m != nil {
		return m.IbcChannel
	}
	return ""
}

func (m *PendingNFTIbcAutoForward) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*LastObservedNFTEthereumBlockHeight)(nil), "gravitynft.v1.LastObservedNFTEthereumBlockHeight")
	proto.RegisterType((*ERC721ToClassId)(nil), "gravitynft.v1.ERC721ToClassId")
	proto.RegisterType((*UnhaltBridgeProposal)(nil), "gravitynft.v1.UnhaltBridgeProposal")
	proto.RegisterType((*PendingNFTIbcAutoForward)(nil), "gravitynft.v1.PendingNFTIbcAutoForward")
}

func init() { proto.RegisterFile("gravitynft/v1/types.proto", fileDescriptor_94c6f9c9e4250776) }

var fileDescriptor_94c6f9c9e4250776 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x6d, 0x68, 0x0b, 0xb9, 0x14, 0x15, 0xdc, 0x80, 0x52, 0x06, 0xa7, 0x78, 0x82, 0x81,
	0x58, 0x09, 0x43, 0x25, 0x36, 0x12, 0x1a, 0x88, 0x84, 0x42, 0x65, 0x85, 0x05, 0x21, 0x59, 0xf6,
	0xf9, 0xf5, 0x7c, 0xaa, 0x73, 0x2f, 0xba, 0xbb, 0x18, 0x3a, 0xb1, 0x76, 0x64, 0x64, 0xcc, 0x3f,
	0xc2, 0xce, 0x98, 0x91, 0x11, 0x25, 0x0b, 0x7f, 0x06, 0xf2, 0x9d, 0x11, 0x01, 0x24, 0x36, 0xbf,
	0xdf, 0xf7, 0xde, 0xbb, 0xf7, 0x59, 0x1f, 0x39, 0x62, 0x32, 0x29, 0xb9, 0xbe, 0x14, 0xe7, 0x3a,
	0x2c, 0x7b, 0xa1, 0xbe, 0x9c, 0x83, 0xea, 0xce, 0x25, 0x6a, 0xf4, 0x6e, 0xfd, 0x96, 0xba, 0x65,
	0xef, 0x7e, 0x8b, 0x21, 0x43, 0xa3, 0x84, 0xd5, 0x97, 0x6d, 0x0a, 0xae, 0x5c, 0x12, 0xbc, 0x4a,
	0x94, 0x7e, 0x9d, 0x2a, 0x90, 0x25, 0x64, 0x93, 0xd1, 0xf4, 0x54, 0xe7, 0x20, 0x61, 0x31, 0x1b,
	0x14, 0x48, 0x2f, 0x5e, 0x02, 0x67, 0xb9, 0xf6, 0xba, 0xe4, 0x90, 0xa2, 0x9a, 0xa1, 0x8a, 0xd3,
	0x8a, 0xc6, 0xb9, 0xc1, 0x6d, 0xf7, 0xd8, 0x7d, 0xb8, 0x13, 0xdd, 0xb1, 0xd2, 0x76, 0x7f, 0x9f,
	0xdc, 0x85, 0x7a, 0xcd, 0x9f, 0x13, 0xd7, 0xcc, 0xc4, 0x21, 0xfc, 0xfb, 0x46, 0xf0, 0x9c, 0x1c,
	0x9c, 0x46, 0xc3, 0x93, 0x7e, 0x6f, 0x8a, 0xc3, 0x22, 0x51, 0x6a, 0x9c, 0x79, 0xf7, 0xc8, 0x1e,
	0x48, 0x7a, 0xd2, 0xef, 0x99, 0x97, 0x1a, 0x51, 0x5d, 0x79, 0x47, 0xe4, 0x26, 0xad, 0x5a, 0x62,
	0x9e, 0x99, 0x8d, 0x8d, 0xe8, 0x06, 0xb5, 0x23, 0xc1, 0x47, 0xd2, 0x7a, 0x23, 0xf2, 0xa4, 0xd0,
	0x03, 0xc9, 0x33, 0x06, 0x67, 0x12, 0xe7, 0xa8, 0x92, 0xc2, 0x6b, 0x91, 0x5d, 0xcd, 0x75, 0x01,
	0xf5, 0x26, 0x5b, 0x78, 0xc7, 0xa4, 0x99, 0x81, 0xa2, 0x92, 0xcf, 0x35, 0x47, 0x51, 0xef, 0xda,
	0x46, 0xde, 0x03, 0xb2, 0xaf, 0x13, 0xc9, 0x40, 0xc7, 0x02, 0x05, 0x85, 0xf6, 0x8e, 0x31, 0xd0,
	0xb4, 0x6c, 0x52, 0xa1, 0xa7, 0xfb, 0x57, 0xcb, 0x8e, 0xf3, 0x79, 0xd9, 0x71, 0x7e, 0x2c, 0x3b,
	0x6e, 0xf0, 0xc5, 0x25, 0xed, 0x33, 0x10, 0x19, 0x17, 0x6c, 0x32, 0x9a, 0x8e, 0x53, 0xfa, 0x6c,
	0xa1, 0x71, 0x84, 0xf2, 0x7d, 0x22, 0x33, 0xef, 0x11, 0xb9, 0x7d, 0x8e, 0x12, 0x38, 0x13, 0xb1,
	0x04, 0x0a, 0xbc, 0x04, 0x59, 0x1f, 0x74, 0x50, 0xf3, 0xa8, 0xc6, 0xff, 0xf1, 0x58, 0x49, 0x1a,
	0x2f, 0x40, 0x54, 0xd2, 0x75, 0x2b, 0x99, 0x7a, 0x9c, 0x79, 0x1d, 0xd2, 0xe4, 0x29, 0x8d, 0x69,
	0x9e, 0x08, 0x01, 0x85, 0xb9, 0xb6, 0x11, 0x11, 0x9e, 0xd2, 0xa1, 0x25, 0x55, 0x03, 0x94, 0x20,
	0x7e, 0xd9, 0xd9, 0x35, 0x76, 0x88, 0x41, 0xc6, 0xcd, 0xe0, 0xdd, 0xd7, 0xb5, 0xef, 0xae, 0xd6,
	0xbe, 0xfb, 0x7d, 0xed, 0xbb, 0x9f, 0x36, 0xbe, 0xb3, 0xda, 0xf8, 0xce, 0xb7, 0x8d, 0xef, 0xbc,
	0x1d, 0x30, 0xae, 0xf3, 0x45, 0xda, 0xa5, 0x38, 0x0b, 0x5f, 0xd8, 0x6c, 0x3d, 0xb6, 0x7f, 0xf9,
	0xef, 0x72, 0x86, 0xd9, 0xa2, 0x80, 0xf0, 0x43, 0xb8, 0x95, 0x4e, 0x13, 0xcd, 0x74, 0xcf, 0xc4,
	0xee, 0xc9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0x22, 0xa1, 0x37, 0xb8, 0x02, 0x00, 0x00,
}

func (this *UnhaltBridgeProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnhaltBridgeProposal)
	if !ok {
		that2, ok := that.(UnhaltBridgeProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.TargetNonce != that1.TargetNonce {
		return false
	}
	return true
}
func (m *LastObservedNFTEthereumBlockHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastObservedNFTEthereumBlockHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastObservedNFTEthereumBlockHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthereumBlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EthereumBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.CosmosBlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CosmosBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ERC721ToClassId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC721ToClassId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC721ToClassId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Erc721) > 0 {
		i -= len(m.Erc721)
		copy(dAtA[i:], m.Erc721)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Erc721)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnhaltBridgeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnhaltBridgeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnhaltBridgeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetNonce != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TargetNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingNFTIbcAutoForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingNFTIbcAutoForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingNFTIbcAutoForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IbcChannel) > 0 {
		i -= len(m.IbcChannel)
		copy(dAtA[i:], m.IbcChannel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IbcChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ForeignReceiver) > 0 {
		i -= len(m.ForeignReceiver)
		copy(dAtA[i:], m.ForeignReceiver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ForeignReceiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LastObservedNFTEthereumBlockHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CosmosBlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.CosmosBlockHeight))
	}
	if m.EthereumBlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.EthereumBlockHeight))
	}
	return n
}

func (m *ERC721ToClassId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc721)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UnhaltBridgeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TargetNonce != 0 {
		n += 1 + sovTypes(uint64(m.TargetNonce))
	}
	return n
}

func (m *PendingNFTIbcAutoForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ForeignReceiver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IbcChannel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTypes(uint64(m.EventNonce))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LastObservedNFTEthereumBlockHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastObservedNFTEthereumBlockHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastObservedNFTEthereumBlockHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosBlockHeight", wireType)
			}
			m.CosmosBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumBlockHeight", wireType)
			}
			m.EthereumBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthereumBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC721ToClassId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC721ToClassId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC721ToClassId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc721", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc721 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnhaltBridgeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnhaltBridgeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnhaltBridgeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNonce", wireType)
			}
			m.TargetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingNFTIbcAutoForward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingNFTIbcAutoForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingNFTIbcAutoForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
