// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/attestation.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NFTClaimType is the cosmos type of an event from the counterpart chain that can
// be handled
type NFTClaimType int32

const (
	// An unspecified claim type
	NFT_CLAIM_TYPE_UNSPECIFIED NFTClaimType = 0
	// A claim for a SendNFTToCosmos transaction
	NFT_CLAIM_TYPE_SEND_NFT_TO_COSMOS NFTClaimType = 1
	// TODO: WILL WE USE THIS?
	// A claim for when an NFT is sent to Ethereum
	NFT_CLAIM_TYPE_SEND_NFT_TO_ETH NFTClaimType = 2
	// TODO: ASK JAKUB ABOUT THIS ONE: IS THIS THE NFT-GRAVITY CONTRACT?
	// A claim for when an erc721 contract has been deployed
	NFT_CLAIM_TYPE_ERC721_DEPLOYED NFTClaimType = 3
)

var NFTClaimType_name = map[int32]string{
	0: "NFT_CLAIM_TYPE_UNSPECIFIED",
	1: "NFT_CLAIM_TYPE_SEND_NFT_TO_COSMOS",
	2: "NFT_CLAIM_TYPE_SEND_NFT_TO_ETH",
	3: "NFT_CLAIM_TYPE_ERC721_DEPLOYED",
}

var NFTClaimType_value = map[string]int32{
	"NFT_CLAIM_TYPE_UNSPECIFIED":        0,
	"NFT_CLAIM_TYPE_SEND_NFT_TO_COSMOS": 1,
	"NFT_CLAIM_TYPE_SEND_NFT_TO_ETH":    2,
	"NFT_CLAIM_TYPE_ERC721_DEPLOYED":    3,
}

func (x NFTClaimType) String() string {
	return proto.EnumName(NFTClaimType_name, int32(x))
}

func (NFTClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{0}
}

// NFTAttestation is an aggregate of `claims` that eventually becomes `observed` by
// all orchestrators
// EVENT_NONCE:
// EventNonce a nonce provided by the gravity contract that is unique per event fired
// These event nonces must be relayed in order. This is a correctness issue,
// if relaying out of order transaction replay attacks become possible
// OBSERVED:
// Observed indicates that >67% of validators have attested to the event,
// and that the event should be executed by the gravity state machine
//
// The actual content of the claims is passed in with the transaction making the claim
// and then passed through the call stack alongside the attestation while it is processed
// the key in which the attestation is stored is keyed on the exact details of the claim
// but there is no reason to store those exact details because the next message sender
// will kindly provide you with them.
type NFTAttestation struct {
	Observed bool       `protobuf:"varint,1,opt,name=observed,proto3" json:"observed,omitempty"`
	Votes    []string   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	Height   uint64     `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Claim    *types.Any `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (m *NFTAttestation) Reset()         { *m = NFTAttestation{} }
func (m *NFTAttestation) String() string { return proto.CompactTextString(m) }
func (*NFTAttestation) ProtoMessage()    {}
func (*NFTAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{0}
}
func (m *NFTAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTAttestation.Merge(m, src)
}
func (m *NFTAttestation) XXX_Size() int {
	return m.Size()
}
func (m *NFTAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_NFTAttestation proto.InternalMessageInfo

func (m *NFTAttestation) GetObserved() bool {
	if m != nil {
		return m.Observed
	}
	return false
}

func (m *NFTAttestation) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *NFTAttestation) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NFTAttestation) GetClaim() *types.Any {
	if m != nil {
		return m.Claim
	}
	return nil
}

// NFTEventObservation is emitted when an attestation has been observed (has enough votes),
// processed and applied to state.
type NFTEventObservation struct {
	AttestationType string `protobuf:"bytes,1,opt,name=attestation_type,json=attestationType,proto3" json:"attestation_type,omitempty"`
	BridgeContract  string `protobuf:"bytes,2,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId   string `protobuf:"bytes,3,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	AttestationId   string `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	Nonce           string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *NFTEventObservation) Reset()         { *m = NFTEventObservation{} }
func (m *NFTEventObservation) String() string { return proto.CompactTextString(m) }
func (*NFTEventObservation) ProtoMessage()    {}
func (*NFTEventObservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{1}
}
func (m *NFTEventObservation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTEventObservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTEventObservation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTEventObservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTEventObservation.Merge(m, src)
}
func (m *NFTEventObservation) XXX_Size() int {
	return m.Size()
}
func (m *NFTEventObservation) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTEventObservation.DiscardUnknown(m)
}

var xxx_messageInfo_NFTEventObservation proto.InternalMessageInfo

func (m *NFTEventObservation) GetAttestationType() string {
	if m != nil {
		return m.AttestationType
	}
	return ""
}

func (m *NFTEventObservation) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *NFTEventObservation) GetBridgeChainId() string {
	if m != nil {
		return m.BridgeChainId
	}
	return ""
}

func (m *NFTEventObservation) GetAttestationId() string {
	if m != nil {
		return m.AttestationId
	}
	return ""
}

func (m *NFTEventObservation) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

// EventInvalidSendNFTToCosmosReceiver is emitted when a deposit is invalid, either because
// the address is invalid, the address is black-listed or for whatever other
// reason it was not possible to send the deposited asset.
type EventInvalidSendNFTToCosmosReceiver struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Nonce  string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Token  string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Sender string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EventInvalidSendNFTToCosmosReceiver) Reset()         { *m = EventInvalidSendNFTToCosmosReceiver{} }
func (m *EventInvalidSendNFTToCosmosReceiver) String() string { return proto.CompactTextString(m) }
func (*EventInvalidSendNFTToCosmosReceiver) ProtoMessage()    {}
func (*EventInvalidSendNFTToCosmosReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{2}
}
func (m *EventInvalidSendNFTToCosmosReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInvalidSendNFTToCosmosReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInvalidSendNFTToCosmosReceiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInvalidSendNFTToCosmosReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInvalidSendNFTToCosmosReceiver.Merge(m, src)
}
func (m *EventInvalidSendNFTToCosmosReceiver) XXX_Size() int {
	return m.Size()
}
func (m *EventInvalidSendNFTToCosmosReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInvalidSendNFTToCosmosReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_EventInvalidSendNFTToCosmosReceiver proto.InternalMessageInfo

func (m *EventInvalidSendNFTToCosmosReceiver) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventInvalidSendNFTToCosmosReceiver) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventInvalidSendNFTToCosmosReceiver) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventInvalidSendNFTToCosmosReceiver) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// EventSendNFTToCosmos is emitted when a CLAIM_TYPE_SEND_NFT_TO_COSMOS has been processed (observed + handled)
type EventSendNFTToCosmos struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Nonce  string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Token  string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *EventSendNFTToCosmos) Reset()         { *m = EventSendNFTToCosmos{} }
func (m *EventSendNFTToCosmos) String() string { return proto.CompactTextString(m) }
func (*EventSendNFTToCosmos) ProtoMessage()    {}
func (*EventSendNFTToCosmos) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{3}
}
func (m *EventSendNFTToCosmos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendNFTToCosmos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendNFTToCosmos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendNFTToCosmos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendNFTToCosmos.Merge(m, src)
}
func (m *EventSendNFTToCosmos) XXX_Size() int {
	return m.Size()
}
func (m *EventSendNFTToCosmos) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendNFTToCosmos.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendNFTToCosmos proto.InternalMessageInfo

func (m *EventSendNFTToCosmos) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventSendNFTToCosmos) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventSendNFTToCosmos) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// EventSendNFTToCosmosLocal is emitted when NFT has been sent to a local (gravity) address,
// rather than added to the ibc forwarding queue. This happens as part of the handling of CLAIM_TYPE_SEND_NFT_TO_COSMOS.
type EventSendNFTToCosmosLocal struct {
	Nonce    string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventSendNFTToCosmosLocal) Reset()         { *m = EventSendNFTToCosmosLocal{} }
func (m *EventSendNFTToCosmosLocal) String() string { return proto.CompactTextString(m) }
func (*EventSendNFTToCosmosLocal) ProtoMessage()    {}
func (*EventSendNFTToCosmosLocal) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{4}
}
func (m *EventSendNFTToCosmosLocal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendNFTToCosmosLocal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendNFTToCosmosLocal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendNFTToCosmosLocal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendNFTToCosmosLocal.Merge(m, src)
}
func (m *EventSendNFTToCosmosLocal) XXX_Size() int {
	return m.Size()
}
func (m *EventSendNFTToCosmosLocal) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendNFTToCosmosLocal.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendNFTToCosmosLocal proto.InternalMessageInfo

func (m *EventSendNFTToCosmosLocal) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventSendNFTToCosmosLocal) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSendNFTToCosmosLocal) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventSendNFTToCosmosLocal) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// EventSendNFTToCosmosPendingIbcAutoForward is emitted when NFT has been added to the IBC auto forwarding queue.
// This happens as part of the handling of CLAIM_TYPE_SEND_NFT_TO_COSMOS.
type EventSendNFTToCosmosPendingIbcAutoForward struct {
	Nonce    string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Channel  string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) Reset() {
	*m = EventSendNFTToCosmosPendingIbcAutoForward{}
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) String() string {
	return proto.CompactTextString(m)
}
func (*EventSendNFTToCosmosPendingIbcAutoForward) ProtoMessage() {}
func (*EventSendNFTToCosmosPendingIbcAutoForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{5}
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendNFTToCosmosPendingIbcAutoForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendNFTToCosmosPendingIbcAutoForward.Merge(m, src)
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) XXX_Size() int {
	return m.Size()
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendNFTToCosmosPendingIbcAutoForward.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendNFTToCosmosPendingIbcAutoForward proto.InternalMessageInfo

func (m *EventSendNFTToCosmosPendingIbcAutoForward) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// EventSendNFTToCosmosExecutedIbcAutoForward is emitted when tokens have been flushed (executed) from
// the IBC auto forwarding queue. In other words, the IBC packet has been sent.
type EventSendNFTToCosmosExecutedIbcAutoForward struct {
	Nonce         string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Receiver      string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Token         string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount        string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Channel       string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	TimeoutTime   string `protobuf:"bytes,6,opt,name=timeout_time,json=timeoutTime,proto3" json:"timeout_time,omitempty"`
	TimeoutHeight string `protobuf:"bytes,7,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) Reset() {
	*m = EventSendNFTToCosmosExecutedIbcAutoForward{}
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) String() string {
	return proto.CompactTextString(m)
}
func (*EventSendNFTToCosmosExecutedIbcAutoForward) ProtoMessage() {}
func (*EventSendNFTToCosmosExecutedIbcAutoForward) Descriptor() ([]byte, []int) {
	return fileDescriptor_168272269e7108d2, []int{6}
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendNFTToCosmosExecutedIbcAutoForward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendNFTToCosmosExecutedIbcAutoForward.Merge(m, src)
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) XXX_Size() int {
	return m.Size()
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendNFTToCosmosExecutedIbcAutoForward.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendNFTToCosmosExecutedIbcAutoForward proto.InternalMessageInfo

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetTimeoutTime() string {
	if m != nil {
		return m.TimeoutTime
	}
	return ""
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) GetTimeoutHeight() string {
	if m != nil {
		return m.TimeoutHeight
	}
	return ""
}

func init() {
	proto.RegisterEnum("gravitynft.v1.NFTClaimType", NFTClaimType_name, NFTClaimType_value)
	proto.RegisterType((*NFTAttestation)(nil), "gravitynft.v1.NFTAttestation")
	proto.RegisterType((*NFTEventObservation)(nil), "gravitynft.v1.NFTEventObservation")
	proto.RegisterType((*EventInvalidSendNFTToCosmosReceiver)(nil), "gravitynft.v1.EventInvalidSendNFTToCosmosReceiver")
	proto.RegisterType((*EventSendNFTToCosmos)(nil), "gravitynft.v1.EventSendNFTToCosmos")
	proto.RegisterType((*EventSendNFTToCosmosLocal)(nil), "gravitynft.v1.EventSendNFTToCosmosLocal")
	proto.RegisterType((*EventSendNFTToCosmosPendingIbcAutoForward)(nil), "gravitynft.v1.EventSendNFTToCosmosPendingIbcAutoForward")
	proto.RegisterType((*EventSendNFTToCosmosExecutedIbcAutoForward)(nil), "gravitynft.v1.EventSendNFTToCosmosExecutedIbcAutoForward")
}

func init() { proto.RegisterFile("gravitynft/v1/attestation.proto", fileDescriptor_168272269e7108d2) }

var fileDescriptor_168272269e7108d2 = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xa4, 0xe9, 0x4f, 0xa6, 0x7f, 0x91, 0xbf, 0xe8, 0x93, 0x9b, 0x85, 0x49, 0x8d, 0x0a,
	0x69, 0x25, 0x62, 0xb5, 0x2c, 0x58, 0xa7, 0x89, 0x43, 0x23, 0xb5, 0x4e, 0xe4, 0x98, 0x45, 0x2b,
	0x24, 0xcb, 0xb1, 0xa7, 0xce, 0x88, 0x78, 0xa6, 0xb2, 0xc7, 0xa6, 0x11, 0x2b, 0x36, 0x88, 0x25,
	0xef, 0x50, 0xf1, 0x2e, 0xac, 0x50, 0x97, 0x2c, 0x51, 0xfb, 0x02, 0x3c, 0x02, 0xf2, 0x78, 0xda,
	0x58, 0x55, 0x60, 0x05, 0x12, 0xab, 0xe4, 0x9c, 0x7b, 0x74, 0xee, 0xb9, 0x23, 0xdf, 0x0b, 0x1f,
	0xf9, 0xa1, 0x93, 0x60, 0x36, 0x25, 0xe7, 0x4c, 0x4b, 0xf6, 0x35, 0x87, 0x31, 0x14, 0x31, 0x87,
	0x61, 0x4a, 0x9a, 0x17, 0x21, 0x65, 0x54, 0x5a, 0x9f, 0x09, 0x9a, 0xc9, 0x7e, 0xad, 0xea, 0x53,
	0x9f, 0xf2, 0x8a, 0x96, 0xfe, 0xcb, 0x44, 0xb5, 0x2d, 0x9f, 0x52, 0x7f, 0x82, 0x34, 0x8e, 0x46,
	0xf1, 0xb9, 0xe6, 0x90, 0x69, 0x56, 0x52, 0x3f, 0x00, 0xb8, 0x61, 0x74, 0xad, 0xd6, 0xcc, 0x58,
	0xaa, 0xc1, 0x15, 0x3a, 0x8a, 0x50, 0x98, 0x20, 0x4f, 0x06, 0x75, 0xd0, 0x58, 0x31, 0xef, 0xb1,
	0x54, 0x85, 0x8b, 0x09, 0x65, 0x28, 0x92, 0x8b, 0xf5, 0x85, 0x46, 0xd9, 0xcc, 0x80, 0xf4, 0x3f,
	0x5c, 0x1a, 0x23, 0xec, 0x8f, 0x99, 0xbc, 0x50, 0x07, 0x8d, 0x92, 0x29, 0x90, 0xb4, 0x07, 0x17,
	0xdd, 0x89, 0x83, 0x03, 0xb9, 0x54, 0x07, 0x8d, 0xd5, 0x83, 0x6a, 0x33, 0xcb, 0xd1, 0xbc, 0xcb,
	0xd1, 0x6c, 0x91, 0xa9, 0x99, 0x49, 0xd4, 0xaf, 0x00, 0xfe, 0x67, 0x74, 0x2d, 0x3d, 0x41, 0x84,
	0xf5, 0x79, 0xbb, 0x2c, 0xcd, 0x2e, 0xac, 0xe4, 0xa6, 0xb6, 0xd9, 0xf4, 0x02, 0xf1, 0x54, 0x65,
	0x73, 0x33, 0xc7, 0x5b, 0xd3, 0x0b, 0x24, 0x3d, 0x85, 0x9b, 0xa3, 0x10, 0x7b, 0x3e, 0xb2, 0x5d,
	0x4a, 0x58, 0xe8, 0xb8, 0x4c, 0x2e, 0x72, 0xe5, 0x46, 0x46, 0xb7, 0x05, 0x2b, 0x3d, 0x99, 0x09,
	0xc7, 0x0e, 0x26, 0x36, 0xf6, 0x78, 0xf0, 0xb2, 0xb9, 0x2e, 0x84, 0x29, 0xdb, 0xf3, 0xa4, 0x1d,
	0xb8, 0x91, 0xef, 0x8d, 0x3d, 0x3e, 0x48, 0xd9, 0x5c, 0xcf, 0xb1, 0x3d, 0xfe, 0x28, 0x84, 0x12,
	0x17, 0xc9, 0x8b, 0xbc, 0x9a, 0x01, 0xf5, 0x3d, 0x80, 0x8f, 0xf9, 0x34, 0x3d, 0x92, 0x38, 0x13,
	0xec, 0x0d, 0x11, 0xf1, 0x8c, 0xae, 0x65, 0xd1, 0x36, 0x8d, 0x02, 0x1a, 0x99, 0xc8, 0x45, 0x38,
	0x41, 0x61, 0xfa, 0x78, 0x4e, 0x40, 0x63, 0xc2, 0xc4, 0x58, 0x02, 0xcd, 0x5c, 0x8b, 0x39, 0xd7,
	0x94, 0x65, 0xf4, 0x0d, 0x22, 0x22, 0x70, 0x06, 0x52, 0x8f, 0x08, 0x11, 0x0f, 0x85, 0x22, 0xa0,
	0x40, 0xea, 0x19, 0xac, 0xf2, 0x08, 0x0f, 0x7a, 0xff, 0x89, 0x9e, 0xea, 0x3b, 0xb8, 0x35, 0xcf,
	0xfb, 0x98, 0xba, 0xce, 0x64, 0x66, 0x04, 0xf2, 0x46, 0x35, 0xb8, 0x12, 0x8a, 0xb1, 0x45, 0x87,
	0x7b, 0xfc, 0xeb, 0xc1, 0x44, 0xd0, 0x52, 0x3e, 0xa8, 0xfa, 0x19, 0xc0, 0xdd, 0x79, 0xdd, 0x07,
	0x88, 0x78, 0x98, 0xf8, 0xbd, 0x91, 0xdb, 0x8a, 0x19, 0xed, 0xd2, 0xf0, 0xad, 0x13, 0x7a, 0x7f,
	0x3b, 0x8d, 0x24, 0xc3, 0x65, 0x77, 0xec, 0x10, 0x82, 0x26, 0xe2, 0x13, 0xb8, 0x83, 0xea, 0x0f,
	0x00, 0xf7, 0xe6, 0xe5, 0xd4, 0x2f, 0x91, 0x1b, 0x33, 0xe4, 0xfd, 0x2b, 0x41, 0xa5, 0x6d, 0xb8,
	0xc6, 0x70, 0x80, 0x68, 0xcc, 0xec, 0xf4, 0x57, 0x5e, 0xe2, 0xe5, 0x55, 0xc1, 0x59, 0x38, 0x40,
	0xe9, 0x36, 0xdc, 0x49, 0xc4, 0xb6, 0x2f, 0x67, 0xdb, 0x20, 0xd8, 0x23, 0x4e, 0xee, 0x5d, 0x01,
	0xb8, 0x66, 0x74, 0xad, 0x76, 0xba, 0xd5, 0x7c, 0x2d, 0x15, 0x58, 0x33, 0xba, 0x96, 0xdd, 0x3e,
	0x6e, 0xf5, 0x4e, 0x6c, 0xeb, 0x74, 0xa0, 0xdb, 0xaf, 0x8c, 0xe1, 0x40, 0x6f, 0xf7, 0xba, 0x3d,
	0xbd, 0x53, 0x29, 0x48, 0x3b, 0x70, 0xfb, 0x41, 0x7d, 0xa8, 0x1b, 0x1d, 0x3b, 0xe5, 0xac, 0xbe,
	0xdd, 0xee, 0x0f, 0x4f, 0xfa, 0xc3, 0x0a, 0x90, 0x54, 0xa8, 0xfc, 0x46, 0xa6, 0x5b, 0x47, 0x95,
	0xe2, 0x1c, 0x8d, 0x6e, 0xb6, 0x5f, 0x1c, 0xec, 0xdb, 0x1d, 0x7d, 0x70, 0xdc, 0x3f, 0xd5, 0x3b,
	0x95, 0x85, 0x5a, 0xe9, 0xe3, 0x95, 0x52, 0x38, 0x7c, 0xfd, 0xe5, 0x46, 0x01, 0xd7, 0x37, 0x0a,
	0xf8, 0x7e, 0xa3, 0x80, 0x4f, 0xb7, 0x4a, 0xe1, 0xfa, 0x56, 0x29, 0x7c, 0xbb, 0x55, 0x0a, 0x67,
	0x87, 0x3e, 0x66, 0xe3, 0x78, 0xd4, 0x74, 0x69, 0xa0, 0xbd, 0xcc, 0x8e, 0xeb, 0xb3, 0x43, 0x7e,
	0x16, 0x1e, 0xc2, 0x80, 0x7a, 0xf1, 0x04, 0x69, 0x97, 0x5a, 0xee, 0x48, 0xa7, 0xf7, 0x29, 0x1a,
	0x2d, 0xf1, 0x0b, 0xf7, 0xfc, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x90, 0x5d, 0x2d, 0xbf,
	0x05, 0x00, 0x00,
}

func (m *NFTAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintAttestation(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Votes[iNdEx])
			copy(dAtA[i:], m.Votes[iNdEx])
			i = encodeVarintAttestation(dAtA, i, uint64(len(m.Votes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Observed {
		i--
		if m.Observed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NFTEventObservation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTEventObservation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTEventObservation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationType) > 0 {
		i -= len(m.AttestationType)
		copy(dAtA[i:], m.AttestationType)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.AttestationType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInvalidSendNFTToCosmosReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInvalidSendNFTToCosmosReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInvalidSendNFTToCosmosReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendNFTToCosmos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendNFTToCosmos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendNFTToCosmos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendNFTToCosmosLocal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendNFTToCosmosLocal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendNFTToCosmosLocal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeoutHeight) > 0 {
		i -= len(m.TimeoutHeight)
		copy(dAtA[i:], m.TimeoutHeight)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.TimeoutHeight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TimeoutTime) > 0 {
		i -= len(m.TimeoutTime)
		copy(dAtA[i:], m.TimeoutTime)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.TimeoutTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttestation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttestation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NFTAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Observed {
		n += 2
	}
	if len(m.Votes) > 0 {
		for _, s := range m.Votes {
			l = len(s)
			n += 1 + l + sovAttestation(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovAttestation(uint64(m.Height))
	}
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *NFTEventObservation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationType)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *EventInvalidSendNFTToCosmosReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *EventSendNFTToCosmos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *EventSendNFTToCosmosLocal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *EventSendNFTToCosmosPendingIbcAutoForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func (m *EventSendNFTToCosmosExecutedIbcAutoForward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.TimeoutTime)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.TimeoutHeight)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func sovAttestation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttestation(x uint64) (n int) {
	return sovAttestation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NFTAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Observed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &types.Any{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTEventObservation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTEventObservation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTEventObservation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInvalidSendNFTToCosmosReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInvalidSendNFTToCosmosReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInvalidSendNFTToCosmosReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendNFTToCosmos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendNFTToCosmos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendNFTToCosmos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendNFTToCosmosLocal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendNFTToCosmosLocal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendNFTToCosmosLocal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendNFTToCosmosPendingIbcAutoForward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendNFTToCosmosPendingIbcAutoForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendNFTToCosmosPendingIbcAutoForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendNFTToCosmosExecutedIbcAutoForward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendNFTToCosmosExecutedIbcAutoForward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendNFTToCosmosExecutedIbcAutoForward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttestation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttestation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttestation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttestation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttestation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttestation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttestation = fmt.Errorf("proto: unexpected end of group")
)
