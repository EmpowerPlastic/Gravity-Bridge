// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravitynft/v1/nft.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingNFT struct {
	ContractAddress  string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenId          uint64 `protobuf:"varint,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenUri         string `protobuf:"bytes,3,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	ClassId          uint64 `protobuf:"varint,4,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	CosmosSender     string `protobuf:"bytes,5,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	EthereumReceiver string `protobuf:"bytes,6,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty"`
}

func (m *OutgoingNFT) Reset()         { *m = OutgoingNFT{} }
func (m *OutgoingNFT) String() string { return proto.CompactTextString(m) }
func (*OutgoingNFT) ProtoMessage()    {}
func (*OutgoingNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_26cb977daa95a324, []int{0}
}
func (m *OutgoingNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingNFT.Merge(m, src)
}
func (m *OutgoingNFT) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingNFT.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingNFT proto.InternalMessageInfo

func (m *OutgoingNFT) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *OutgoingNFT) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *OutgoingNFT) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func (m *OutgoingNFT) GetClassId() uint64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *OutgoingNFT) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *OutgoingNFT) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

func init() {
	proto.RegisterType((*OutgoingNFT)(nil), "gravitynft.v1.OutgoingNFT")
}

func init() { proto.RegisterFile("gravitynft/v1/nft.proto", fileDescriptor_26cb977daa95a324) }

var fileDescriptor_26cb977daa95a324 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x17, 0x9d, 0xd3, 0x45, 0x87, 0x33, 0x17, 0x2b, 0x42, 0x18, 0x7a, 0x99, 0x88, 0x2b,
	0xc3, 0x27, 0xb0, 0x07, 0x65, 0x17, 0x85, 0xaa, 0x17, 0x11, 0x4a, 0x97, 0xfc, 0xd7, 0x05, 0xd7,
	0x64, 0x24, 0x69, 0x71, 0x6f, 0xe1, 0x63, 0x79, 0xdc, 0xd1, 0x8b, 0x20, 0xed, 0x8b, 0xc8, 0x12,
	0x87, 0xe2, 0xf1, 0xfb, 0x7d, 0xdf, 0xef, 0xf2, 0xe1, 0xc3, 0x4c, 0xa7, 0xa5, 0xb0, 0x0b, 0x39,
	0xb1, 0x61, 0x39, 0x0c, 0xe5, 0xc4, 0x0e, 0xe6, 0x5a, 0x59, 0x45, 0x3a, 0xbf, 0xc5, 0xa0, 0x1c,
	0x9e, 0x7c, 0x22, 0xbc, 0x7b, 0x57, 0xd8, 0x4c, 0x09, 0x99, 0xdd, 0x5e, 0x3f, 0x90, 0x33, 0xdc,
	0x65, 0x4a, 0x5a, 0x9d, 0x32, 0x9b, 0xa4, 0x9c, 0x6b, 0x30, 0x26, 0x40, 0x3d, 0xd4, 0x6f, 0xc7,
	0xfb, 0x6b, 0x7e, 0xe5, 0x31, 0x39, 0xc2, 0x3b, 0x56, 0xbd, 0x80, 0x4c, 0x04, 0x0f, 0x36, 0x7a,
	0xa8, 0xdf, 0x8c, 0xb7, 0x5d, 0x1e, 0x71, 0x72, 0x8c, 0xdb, 0xbe, 0x2a, 0xb4, 0x08, 0x36, 0x9d,
	0xee, 0xb7, 0x8f, 0x5a, 0xac, 0x3c, 0x36, 0x4b, 0x8d, 0x59, 0x79, 0x4d, 0xef, 0xb9, 0x3c, 0xe2,
	0xe4, 0x14, 0x77, 0x98, 0x32, 0xb9, 0x32, 0x89, 0x01, 0xc9, 0x41, 0x07, 0x5b, 0xce, 0xdd, 0xf3,
	0xf0, 0xde, 0x31, 0x72, 0x8e, 0x0f, 0xc0, 0x4e, 0x41, 0x43, 0x91, 0x27, 0x1a, 0x18, 0x88, 0x12,
	0x74, 0xd0, 0x72, 0xc3, 0xee, 0xba, 0x88, 0x7f, 0x78, 0xf4, 0xfc, 0x5e, 0x51, 0xb4, 0xac, 0x28,
	0xfa, 0xaa, 0x28, 0x7a, 0xab, 0x69, 0x63, 0x59, 0xd3, 0xc6, 0x47, 0x4d, 0x1b, 0x4f, 0x51, 0x26,
	0xec, 0xb4, 0x18, 0x0f, 0x98, 0xca, 0xc3, 0x1b, 0xff, 0xc9, 0x45, 0xa4, 0x05, 0xcf, 0xe0, 0x7f,
	0xcc, 0x15, 0x2f, 0x66, 0x10, 0xbe, 0x86, 0x7f, 0x3e, 0xb5, 0x8b, 0x39, 0x98, 0x71, 0xcb, 0x7d,
	0x7a, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x57, 0xd1, 0x0e, 0x56, 0x6e, 0x01, 0x00, 0x00,
}

func (m *OutgoingNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintNft(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintNft(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ClassId != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TokenId != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.TokenId != 0 {
		n += 1 + sovNft(uint64(m.TokenId))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.ClassId != 0 {
		n += 1 + sovNft(uint64(m.ClassId))
	}
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
