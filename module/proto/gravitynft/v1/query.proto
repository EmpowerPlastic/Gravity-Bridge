syntax = "proto3";
package gravitynft.v1;

import "gravitynft/v1/genesis.proto";
import "gravitynft/v1/attestation.proto";
import "gravitynft/v1/types.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/Gravity-Bridge/Gravity-Bridge/module/x/gravitynft/types";

// Query defines the gRPC querier service
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/gravitynft/v1beta/params";
  }
  rpc GetLastObservedNFTEthBlock(QueryLastObservedNFTEthBlockRequest) returns (QueryLastObservedNFTEthBlockResponse) {
    option (google.api.http).get = "/gravitynft/v1beta/query_last_observed_nft_eth_block";
  }
  rpc GetLastObservedNFTEthNonce(QueryLastObservedNFTEthNonceRequest) returns (QueryLastObservedNFTEthNonceResponse) {
    option (google.api.http).get = "/gravitynft/v1beta/query_last_observed_nft_eth_nonce";
  }
  rpc GetNFTAttestations(QueryNFTAttestationsRequest) returns (QueryNFTAttestationsResponse) {
    option (google.api.http).get = "/gravitynft/v1beta/query_nft_attestations";
  }
  rpc GetPendingNFTIbcAutoForwards(QueryPendingNFTIbcAutoForwards) returns (QueryPendingNFTIbcAutoForwardsResponse) {
    option (google.api.http).get = "/gravitynft/v1beta/query_pending_nft_ibc_auto_forwards";
  }
}

message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryLastObservedNFTEthBlockRequest defines the request for getting the height of the
// last applied Ethereum Event on the nft bridge. This is expected to lag the actual
// Ethereum block height significantly due to 1. Ethereum Finality and
//  2. Consensus mirroring the state on Ethereum
message QueryLastObservedNFTEthBlockRequest{}
message QueryLastObservedNFTEthBlockResponse{
  // a response of 0 indicates that no Ethereum events have been observed, and thus
  // the bridge is inactive
  uint64 block = 1;
}

// QueryLastObservedNFTEthNonceRequest defines the request for getting the event nonce
// of the last applied Ethereum Event on the nft bridge.
// Note that this is likely to lag the last executed event a little
// due to 1. Ethereum Finality and 2. Consensus mirroring the Ethereum state
message QueryLastObservedNFTEthNonceRequest{}
message QueryLastObservedNFTEthNonceResponse{
  // a response of 0 indicates that no Ethereum events have been observed, and thus
  // the bridge is inactive
  uint64 nonce = 1;
}

// QueryNFTAttestationsRequest defines the request structure for getting recent
// nft attestations with optional query parameters. By default, a limited set of
// recent attestations will be returned, defined by 'limit'. These attestations
// can be ordered ascending or descending by nonce, that defaults to ascending.
// Filtering criteria may also be provided, including nonce, claim type, and
// height. Note, that an attestation will be returned if it matches ANY of the
// filter query parameters provided.
message QueryNFTAttestationsRequest {
  // limit defines how many attestations to limit in the response.
  uint64 limit = 1;
  // order_by provides ordering of nft attestations by nonce in the response. Either
  // 'asc' or 'desc' can be provided. If no value is provided, it defaults to 'asc'.
  string order_by = 2;
  // claim_type allows filtering attestations by Ethereum nft claim type.
  string claim_type = 3;
  // nonce allows filtering attestations by Ethereum nft claim nonce.
  uint64 nonce = 4;
  // height allows filtering attestations by Ethereum nft claim height.
  uint64 height = 5;
}
message QueryNFTAttestationsResponse {
  repeated NFTAttestation attestations = 1 [(gogoproto.nullable) = false];
}

message QueryPendingNFTIbcAutoForwards {
  // limit defines the number of pending forwards to return, in order of their nonce
  uint64 limit = 1;
}
message QueryPendingNFTIbcAutoForwardsResponse{
  repeated PendingNFTIbcAutoForward pending_ibc_auto_forwards = 1;
}